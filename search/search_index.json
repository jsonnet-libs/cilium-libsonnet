{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cilium Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>1.12</li> <li>1.13</li> <li>1.14</li> <li>1.15</li> </ul>"},{"location":"1.12/","title":"cilium","text":"<pre><code>local cilium = import \"github.com/jsonnet-libs/cilium-libsonnet/1.12/main.libsonnet\"\n</code></pre> <ul> <li>cilium</li> </ul>"},{"location":"1.12/cilium/","title":"cilium","text":"<ul> <li>v2</li> </ul>"},{"location":"1.12/cilium/v2/","title":"cilium.v2","text":"<ul> <li>ciliumClusterwideEnvoyConfig</li> <li>ciliumClusterwideNetworkPolicy</li> <li>ciliumEgressGatewayPolicy</li> <li>ciliumEndpoint</li> <li>ciliumEnvoyConfig</li> <li>ciliumExternalWorkload</li> <li>ciliumIdentity</li> <li>ciliumLocalRedirectPolicy</li> <li>ciliumNetworkPolicy</li> <li>ciliumNode</li> </ul>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/","title":"cilium.v2.ciliumClusterwideEnvoyConfig","text":""},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideEnvoyConfig</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/","title":"cilium.v2.ciliumClusterwideNetworkPolicy","text":"<p>\"CiliumClusterwideNetworkPolicy is a Kubernetes third-party resource with an modified version of CiliumNetworkPolicy which is cluster scoped rather than namespace scoped.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideNetworkPolicy</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/","title":"cilium.v2.ciliumEgressGatewayPolicy","text":""},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDestinationCIDRs(destinationCIDRs)</code></li> <li><code>fn withDestinationCIDRsMixin(destinationCIDRs)</code></li> <li><code>fn withSelectors(selectors)</code></li> <li><code>fn withSelectorsMixin(selectors)</code></li> <li><code>obj spec.egressGateway</code><ul> <li><code>fn withEgressIP(egressIP)</code></li> <li><code>fn withInterface(interface)</code></li> <li><code>obj spec.egressGateway.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressGateway.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.selectors</code><ul> <li><code>obj spec.selectors.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.selectors.podSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.podSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEgressGatewayPolicy</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-spec","title":"obj spec","text":""},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrs","title":"fn spec.withDestinationCIDRs","text":"<pre><code>withDestinationCIDRs(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrsmixin","title":"fn spec.withDestinationCIDRsMixin","text":"<pre><code>withDestinationCIDRsMixin(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectors","title":"fn spec.withSelectors","text":"<pre><code>withSelectors(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectorsmixin","title":"fn spec.withSelectorsMixin","text":"<pre><code>withSelectorsMixin(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgateway","title":"obj spec.egressGateway","text":"<p>\"EgressGateway is the gateway node responsible for SNATing traffic.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithegressip","title":"fn spec.egressGateway.withEgressIP","text":"<pre><code>withEgressIP(egressIP)\n</code></pre> <p>\"EgressIP is the source IP address that the egress traffic is SNATed with. \\n Example: When set to \\\"192.168.1.100\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with IP address 192.168.1.100. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithinterface","title":"fn spec.egressGateway.withInterface","text":"<pre><code>withInterface(interface)\n</code></pre> <p>\"Interface is the network interface to which the egress IP address that the traffic is SNATed with is assigned. \\n Example: When set to \\\"eth1\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with the first IPv4 address assigned to the eth1 interface. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselector","title":"obj spec.egressGateway.nodeSelector","text":"<p>\"This is a label selector which selects the node that should act as egress gateway for the given policy. In case multiple nodes are selected, only the first one in the lexical ordering over the node names will be used. This field follows standard label selector semantics.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressions","title":"fn spec.egressGateway.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressionsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabels","title":"fn spec.egressGateway.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabelsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselectormatchexpressions","title":"obj spec.egressGateway.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithkey","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithoperator","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvalues","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvaluesmixin","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectors","title":"obj spec.selectors","text":"<p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselector","title":"obj spec.selectors.namespaceSelector","text":"<p>\"Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressions","title":"fn spec.selectors.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.selectors.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabels","title":"fn spec.selectors.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabelsmixin","title":"fn spec.selectors.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselectormatchexpressions","title":"obj spec.selectors.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithkey","title":"fn spec.selectors.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithoperator","title":"fn spec.selectors.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvalues","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselector","title":"obj spec.selectors.podSelector","text":"<p>\"This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressions","title":"fn spec.selectors.podSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressionsmixin","title":"fn spec.selectors.podSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabels","title":"fn spec.selectors.podSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabelsmixin","title":"fn spec.selectors.podSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselectormatchexpressions","title":"obj spec.selectors.podSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithkey","title":"fn spec.selectors.podSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithoperator","title":"fn spec.selectors.podSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvalues","title":"fn spec.selectors.podSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.podSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/","title":"cilium.v2.ciliumEndpoint","text":"<p>\"CiliumEndpoint is the status of a Cilium policy rule.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEndpoint</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumEndpoint/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/","title":"cilium.v2.ciliumEnvoyConfig","text":""},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEnvoyConfig</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/","title":"cilium.v2.ciliumExternalWorkload","text":"<p>\"CiliumExternalWorkload is a Kubernetes Custom Resource that contains a specification for an external workload that can join the cluster.  The name of the CRD is the FQDN of the external workload, and it needs to match the name in the workload registration. The labels on the CRD object are the labels that will be used to allocate a Cilium Identity for the external workload. If 'io.kubernetes.pod.namespace' or 'io.kubernetes.pod.name' labels are not explicitly specified, they will be defaulted to 'default' and , respectively. 'io.cilium.k8s.policy.cluster' will always be defined as the name of the current cluster, which defaults to \\\"default\\\".\""},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withIpv4-Alloc-Cidr(ipv4_alloc_cidr)</code></li> <li><code>fn withIpv6-Alloc-Cidr(ipv6_alloc_cidr)</code></li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumExternalWorkload</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired configuration of the external Cilium workload.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-specwithipv4-alloc-cidr","title":"fn spec.withIpv4-Alloc-Cidr","text":"<pre><code>withIpv4-Alloc-Cidr(ipv4_alloc_cidr)\n</code></pre> <p>\"IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumExternalWorkload/#fn-specwithipv6-alloc-cidr","title":"fn spec.withIpv6-Alloc-Cidr","text":"<pre><code>withIpv6-Alloc-Cidr(ipv6_alloc_cidr)\n</code></pre> <p>\"IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/","title":"cilium.v2.ciliumIdentity","text":"<p>\"CiliumIdentity is a CRD that represents an identity managed by Cilium. It is intended as a backing store for identity allocation, acting as the global coordination backend, and can be used in place of a KVStore (such as etcd). The name of the CRD is the numeric identity and the labels on the CRD object are the the kubernetes sourced labels seen by cilium. This is currently the only label source possible when running under kubernetes. Non-kubernetes labels are filtered but all labels, from all sources, are places in the SecurityLabels field. These also include the source and are used to define the identity. The labels under metav1.ObjectMeta can be used when searching for CiliumIdentity instances that include particular labels. This can be done with invocations such as:   kubectl get ciliumid -l 'foo=bar' Each node using a ciliumidentity updates the status field with it's name and a timestamp when it first allocates or uses an identity, and periodically after that. It deletes its entry when no longer using this identity. cilium-operator uses the list of nodes in status to reference count users of this identity, and to expire stale usage.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSecurity-Labels(security_labels)</code></li> <li><code>fn withSecurity-LabelsMixin(security_labels)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumIdentity</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-withsecurity-labels","title":"fn withSecurity-Labels","text":"<pre><code>withSecurity-Labels(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-withsecurity-labelsmixin","title":"fn withSecurity-LabelsMixin","text":"<pre><code>withSecurity-LabelsMixin(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumIdentity/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/","title":"cilium.v2.ciliumLocalRedirectPolicy","text":"<p>\"CiliumLocalRedirectPolicy is a Kubernetes Custom Resource that contains a specification to redirect traffic locally within a node.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.redirectBackend</code><ul> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectBackend.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend</code><ul> <li><code>obj spec.redirectFrontend.addressMatcher</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.addressMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend.serviceMatcher</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.serviceMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumLocalRedirectPolicy</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired behavior of the local redirect policy.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description can be used by the creator of the policy to describe the purpose of this policy.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackend","title":"obj spec.redirectBackend","text":"<p>\"RedirectBackend specifies backend configuration to redirect traffic to. It can not be empty.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoports","title":"fn spec.redirectBackend.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoportsmixin","title":"fn spec.redirectBackend.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselector","title":"obj spec.redirectBackend.localEndpointSelector","text":"<p>\"LocalEndpointSelector selects node local pod(s) where traffic is redirected to.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressions","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressionsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabels","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabelsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselectormatchexpressions","title":"obj spec.redirectBackend.localEndpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithkey","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithoperator","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvalues","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendtoports","title":"obj spec.redirectBackend.toPorts","text":"<p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithname","title":"fn spec.redirectBackend.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithport","title":"fn spec.redirectBackend.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithprotocol","title":"fn spec.redirectBackend.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontend","title":"obj spec.redirectFrontend","text":"<p>\"RedirectFrontend specifies frontend configuration to redirect traffic from. It can not be empty.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatcher","title":"obj spec.redirectFrontend.addressMatcher","text":"<p>\"AddressMatcher is a tuple {IP, port, protocol} that matches traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithip","title":"fn spec.redirectFrontend.addressMatcher.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is a destination ip address for traffic to be redirected. \\n Example: When it is set to \\\"169.254.169.254\\\", traffic destined to \\\"169.254.169.254\\\" is redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoports","title":"fn spec.redirectFrontend.addressMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoportsmixin","title":"fn spec.redirectFrontend.addressMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatchertoports","title":"obj spec.redirectFrontend.addressMatcher.toPorts","text":"<p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithname","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithport","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithprotocol","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematcher","title":"obj spec.redirectFrontend.serviceMatcher","text":"<p>\"ServiceMatcher specifies Kubernetes service and port that matches traffic to be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithnamespace","title":"fn spec.redirectFrontend.serviceMatcher.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. The service namespace must match the namespace of the parent Local Redirect Policy.  For Cluster-wide Local Redirect Policy, this can be any namespace.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithservicename","title":"fn spec.redirectFrontend.serviceMatcher.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected. The service type needs to be ClusterIP. \\n Example: When this field is populated with 'serviceName:myService', all the traffic destined to the cluster IP of this service at the (specified) service port(s) will be redirected.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoports","title":"fn spec.redirectFrontend.serviceMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoportsmixin","title":"fn spec.redirectFrontend.serviceMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematchertoports","title":"obj spec.redirectFrontend.serviceMatcher.toPorts","text":"<p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithname","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithport","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.12/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithprotocol","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/","title":"cilium.v2.ciliumNetworkPolicy","text":"<p>\"CiliumNetworkPolicy is a Kubernetes third-party resource with an extended version of NetworkPolicy.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNetworkPolicy</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"\\\"/\\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.12/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/","title":"cilium.v2.ciliumNode","text":"<p>\"CiliumNode represents a node managed by Cilium. It contains a specification to control various node specific configuration aspects and a status section to represent the status of the node.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withNodeidentity(nodeidentity)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.alibaba-cloud</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withCidr-Block(cidr_block)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> <li><code>fn withVswitch-Tags(vswitch_tags)</code></li> <li><code>fn withVswitch-TagsMixin(vswitch_tags)</code></li> <li><code>fn withVswitches(vswitches)</code></li> <li><code>fn withVswitchesMixin(vswitches)</code></li> </ul> </li> <li><code>obj spec.azure</code><ul> <li><code>fn withInterface-Name(interface_name)</code></li> </ul> </li> <li><code>obj spec.encryption</code><ul> <li><code>fn withKey(key)</code></li> </ul> </li> <li><code>obj spec.eni</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withDelete-On-Termination(delete_on_termination)</code></li> <li><code>fn withDisable-Prefix-Delegation(disable_prefix_delegation)</code></li> <li><code>fn withExclude-Interface-Tags(exclude_interface_tags)</code></li> <li><code>fn withExclude-Interface-TagsMixin(exclude_interface_tags)</code></li> <li><code>fn withFirst-Interface-Index(first_interface_index)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withSubnet-Ids(subnet_ids)</code></li> <li><code>fn withSubnet-IdsMixin(subnet_ids)</code></li> <li><code>fn withSubnet-Tags(subnet_tags)</code></li> <li><code>fn withSubnet-TagsMixin(subnet_tags)</code></li> <li><code>fn withUse-Primary-Address(use_primary_address)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> </ul> </li> <li><code>obj spec.health</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ipam</code><ul> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMax-Allocate(max_allocate)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)</code></li> <li><code>fn withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)</code></li> <li><code>fn withPodCIDRs(podCIDRs)</code></li> <li><code>fn withPodCIDRsMixin(podCIDRs)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withPoolMixin(pool)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.12/cilium/v2/ciliumNode/#fields","title":"Fields","text":""},{"location":"1.12/cilium/v2/ciliumNode/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNode</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired specification/configuration of the node.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specwithinstance-id","title":"fn spec.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the identifier of the node. This is different from the node name which is typically the FQDN of the node. The InstanceID typically refers to the identifier used by the cloud provider or some other means of identification.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specwithnodeidentity","title":"fn spec.withNodeidentity","text":"<pre><code>withNodeidentity(nodeidentity)\n</code></pre> <p>\"NodeIdentity is the Cilium numeric identity allocated for the node, if any.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specaddresseswithip","title":"fn spec.addresses.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is an IP of a node\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the type of the node address\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specalibaba-cloud","title":"obj spec.alibaba-cloud","text":"<p>\"AlibabaCloud is the AlibabaCloud IPAM specific configuration.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithavailability-zone","title":"fn spec.alibaba-cloud.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithcidr-block","title":"fn spec.alibaba-cloud.withCidr-Block","text":"<pre><code>withCidr-Block(cidr_block)\n</code></pre> <p>\"CIDRBlock is vpc ipv4 CIDR\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithinstance-type","title":"fn spec.alibaba-cloud.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the ECS instance type, e.g. \\\"ecs.g6.2xlarge\\</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tags","title":"fn spec.alibaba-cloud.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tagsmixin","title":"fn spec.alibaba-cloud.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groups","title":"fn spec.alibaba-cloud.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groupsmixin","title":"fn spec.alibaba-cloud.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvpc-id","title":"fn spec.alibaba-cloud.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VPCID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tags","title":"fn spec.alibaba-cloud.withVswitch-Tags","text":"<pre><code>withVswitch-Tags(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tagsmixin","title":"fn spec.alibaba-cloud.withVswitch-TagsMixin","text":"<pre><code>withVswitch-TagsMixin(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitches","title":"fn spec.alibaba-cloud.withVswitches","text":"<pre><code>withVswitches(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitchesmixin","title":"fn spec.alibaba-cloud.withVswitchesMixin","text":"<pre><code>withVswitchesMixin(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specazure","title":"obj spec.azure","text":"<p>\"Azure is the Azure IPAM specific configuration.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specazurewithinterface-name","title":"fn spec.azure.withInterface-Name","text":"<pre><code>withInterface-Name(interface_name)\n</code></pre> <p>\"InterfaceName is the name of the interface the cilium-operator will use to allocate all the IPs on\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specencryption","title":"obj spec.encryption","text":"<p>\"Encryption is the encryption configuration of the node.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specencryptionwithkey","title":"fn spec.encryption.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the index to the key to use for encryption or 0 if encryption is disabled.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-speceni","title":"obj spec.eni","text":"<p>\"ENI is the AWS ENI specific configuration.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithavailability-zone","title":"fn spec.eni.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithdelete-on-termination","title":"fn spec.eni.withDelete-On-Termination","text":"<pre><code>withDelete-On-Termination(delete_on_termination)\n</code></pre> <p>\"DeleteOnTermination defines that the ENI should be deleted when the associated instance is terminated. If the parameter is not set the default behavior is to delete the ENI on instance termination.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithdisable-prefix-delegation","title":"fn spec.eni.withDisable-Prefix-Delegation","text":"<pre><code>withDisable-Prefix-Delegation(disable_prefix_delegation)\n</code></pre> <p>\"DisablePrefixDelegation determines whether ENI prefix delegation should be disabled on this node.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tags","title":"fn spec.eni.withExclude-Interface-Tags","text":"<pre><code>withExclude-Interface-Tags(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tagsmixin","title":"fn spec.eni.withExclude-Interface-TagsMixin","text":"<pre><code>withExclude-Interface-TagsMixin(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithfirst-interface-index","title":"fn spec.eni.withFirst-Interface-Index","text":"<pre><code>withFirst-Interface-Index(first_interface_index)\n</code></pre> <p>\"FirstInterfaceIndex is the index of the first ENI to use for IP allocation, e.g. if the node has eth0, eth1, eth2 and FirstInterfaceIndex is set to 1, then only eth1 and eth2 will be used for IP allocation, eth0 will be ignored for PodIP allocation.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithinstance-id","title":"fn spec.eni.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the AWS InstanceId of the node. The InstanceID is used to retrieve AWS metadata for the node. \\n OBSOLETE: This field is obsolete, please use Spec.InstanceID\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithinstance-type","title":"fn spec.eni.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the AWS EC2 instance type, e.g. \\\"m5.large\\</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithmax-above-watermark","title":"fn spec.eni.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MaxAboveWatermark\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithmin-allocate","title":"fn spec.eni.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MinAllocate\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithpre-allocate","title":"fn spec.eni.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.PreAllocate\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tags","title":"fn spec.eni.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tagsmixin","title":"fn spec.eni.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groups","title":"fn spec.eni.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groupsmixin","title":"fn spec.eni.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsubnet-ids","title":"fn spec.eni.withSubnet-Ids","text":"<pre><code>withSubnet-Ids(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsubnet-idsmixin","title":"fn spec.eni.withSubnet-IdsMixin","text":"<pre><code>withSubnet-IdsMixin(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tags","title":"fn spec.eni.withSubnet-Tags","text":"<pre><code>withSubnet-Tags(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tagsmixin","title":"fn spec.eni.withSubnet-TagsMixin","text":"<pre><code>withSubnet-TagsMixin(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithuse-primary-address","title":"fn spec.eni.withUse-Primary-Address","text":"<pre><code>withUse-Primary-Address(use_primary_address)\n</code></pre> <p>\"UsePrimaryAddress determines whether an ENI's primary address should be available for allocations on the node\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-speceniwithvpc-id","title":"fn spec.eni.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VpcID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-spechealth","title":"obj spec.health","text":"<p>\"HealthAddressing is the addressing information for health connectivity checking.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-spechealthwithipv4","title":"fn spec.health.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre> <p>\"IPv4 is the IPv4 address of the IPv4 health endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-spechealthwithipv6","title":"fn spec.health.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre> <p>\"IPv6 is the IPv6 address of the IPv4 health endpoint.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specingress","title":"obj spec.ingress","text":"<p>\"IngressAddressing is the addressing information for Ingress listener.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specingresswithipv4","title":"fn spec.ingress.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specingresswithipv6","title":"fn spec.ingress.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre>"},{"location":"1.12/cilium/v2/ciliumNode/#obj-specipam","title":"obj spec.ipam","text":"<p>\"IPAM is the address management specification. This section can be populated by a user or it can be automatically populated by an IPAM operator.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithmax-above-watermark","title":"fn spec.ipam.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithmax-allocate","title":"fn spec.ipam.withMax-Allocate","text":"<pre><code>withMax-Allocate(max_allocate)\n</code></pre> <p>\"MaxAllocate is the maximum number of IPs that can be allocated to the node. When the current amount of allocated IPs will approach this value, the considered value for PreAllocate will decrease down to 0 in order to not attempt to allocate more addresses than defined.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithmin-allocate","title":"fn spec.ipam.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-allocation-threshold","title":"fn spec.ipam.withPod-Cidr-Allocation-Threshold","text":"<pre><code>withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)\n</code></pre> <p>\"PodCIDRAllocationThreshold defines the minimum number of free IPs which must be available to this node via its pod CIDR pool. If the total number of IP addresses in the pod CIDR pool is less than this value, the pod CIDRs currently in-use by this node will be marked as depleted and cilium-operator will allocate a new pod CIDR to this node. This value effectively defines the buffer of IP addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-release-threshold","title":"fn spec.ipam.withPod-Cidr-Release-Threshold","text":"<pre><code>withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)\n</code></pre> <p>\"PodCIDRReleaseThreshold defines the maximum number of free IPs which may be available to this node via its pod CIDR pool. While the total number of free IP addresses in the pod CIDR pool is larger than this value, cilium-agent will attempt to release currently unused pod CIDRs.\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpodcidrs","title":"fn spec.ipam.withPodCIDRs","text":"<pre><code>withPodCIDRs(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpodcidrsmixin","title":"fn spec.ipam.withPodCIDRsMixin","text":"<pre><code>withPodCIDRsMixin(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpool","title":"fn spec.ipam.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpoolmixin","title":"fn spec.ipam.withPoolMixin","text":"<pre><code>withPoolMixin(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.12/cilium/v2/ciliumNode/#fn-specipamwithpre-allocate","title":"fn spec.ipam.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.13/","title":"cilium","text":"<pre><code>local cilium = import \"github.com/jsonnet-libs/cilium-libsonnet/1.13/main.libsonnet\"\n</code></pre> <ul> <li>cilium</li> </ul>"},{"location":"1.13/cilium/","title":"cilium","text":"<ul> <li>v2</li> </ul>"},{"location":"1.13/cilium/v2/","title":"cilium.v2","text":"<ul> <li>ciliumClusterwideEnvoyConfig</li> <li>ciliumClusterwideNetworkPolicy</li> <li>ciliumEgressGatewayPolicy</li> <li>ciliumEndpoint</li> <li>ciliumEnvoyConfig</li> <li>ciliumExternalWorkload</li> <li>ciliumIdentity</li> <li>ciliumLocalRedirectPolicy</li> <li>ciliumNetworkPolicy</li> <li>ciliumNode</li> </ul>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/","title":"cilium.v2.ciliumClusterwideEnvoyConfig","text":""},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideEnvoyConfig</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/","title":"cilium.v2.ciliumClusterwideNetworkPolicy","text":"<p>\"CiliumClusterwideNetworkPolicy is a Kubernetes third-party resource with an modified version of CiliumNetworkPolicy which is cluster scoped rather than namespace scoped.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideNetworkPolicy</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressauth","title":"obj spec.egress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressauthwithtype","title":"fn spec.egress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressauth","title":"obj spec.ingress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressauthwithtype","title":"fn spec.ingress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressauth","title":"obj specs.egress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressauthwithtype","title":"fn specs.egress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressauth","title":"obj specs.ingress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressauthwithtype","title":"fn specs.ingress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/","title":"cilium.v2.ciliumEgressGatewayPolicy","text":""},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDestinationCIDRs(destinationCIDRs)</code></li> <li><code>fn withDestinationCIDRsMixin(destinationCIDRs)</code></li> <li><code>fn withSelectors(selectors)</code></li> <li><code>fn withSelectorsMixin(selectors)</code></li> <li><code>obj spec.egressGateway</code><ul> <li><code>fn withEgressIP(egressIP)</code></li> <li><code>fn withInterface(interface)</code></li> <li><code>obj spec.egressGateway.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressGateway.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.selectors</code><ul> <li><code>obj spec.selectors.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.selectors.podSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.podSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEgressGatewayPolicy</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-spec","title":"obj spec","text":""},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrs","title":"fn spec.withDestinationCIDRs","text":"<pre><code>withDestinationCIDRs(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrsmixin","title":"fn spec.withDestinationCIDRsMixin","text":"<pre><code>withDestinationCIDRsMixin(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectors","title":"fn spec.withSelectors","text":"<pre><code>withSelectors(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectorsmixin","title":"fn spec.withSelectorsMixin","text":"<pre><code>withSelectorsMixin(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgateway","title":"obj spec.egressGateway","text":"<p>\"EgressGateway is the gateway node responsible for SNATing traffic.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithegressip","title":"fn spec.egressGateway.withEgressIP","text":"<pre><code>withEgressIP(egressIP)\n</code></pre> <p>\"EgressIP is the source IP address that the egress traffic is SNATed with. \\n Example: When set to \\\"192.168.1.100\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with IP address 192.168.1.100. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithinterface","title":"fn spec.egressGateway.withInterface","text":"<pre><code>withInterface(interface)\n</code></pre> <p>\"Interface is the network interface to which the egress IP address that the traffic is SNATed with is assigned. \\n Example: When set to \\\"eth1\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with the first IPv4 address assigned to the eth1 interface. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselector","title":"obj spec.egressGateway.nodeSelector","text":"<p>\"This is a label selector which selects the node that should act as egress gateway for the given policy. In case multiple nodes are selected, only the first one in the lexical ordering over the node names will be used. This field follows standard label selector semantics.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressions","title":"fn spec.egressGateway.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressionsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabels","title":"fn spec.egressGateway.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabelsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselectormatchexpressions","title":"obj spec.egressGateway.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithkey","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithoperator","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvalues","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvaluesmixin","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectors","title":"obj spec.selectors","text":"<p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselector","title":"obj spec.selectors.namespaceSelector","text":"<p>\"Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressions","title":"fn spec.selectors.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.selectors.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabels","title":"fn spec.selectors.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabelsmixin","title":"fn spec.selectors.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselectormatchexpressions","title":"obj spec.selectors.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithkey","title":"fn spec.selectors.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithoperator","title":"fn spec.selectors.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvalues","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselector","title":"obj spec.selectors.podSelector","text":"<p>\"This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressions","title":"fn spec.selectors.podSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressionsmixin","title":"fn spec.selectors.podSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabels","title":"fn spec.selectors.podSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabelsmixin","title":"fn spec.selectors.podSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselectormatchexpressions","title":"obj spec.selectors.podSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithkey","title":"fn spec.selectors.podSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithoperator","title":"fn spec.selectors.podSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvalues","title":"fn spec.selectors.podSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.podSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/","title":"cilium.v2.ciliumEndpoint","text":"<p>\"CiliumEndpoint is the status of a Cilium policy rule.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEndpoint</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumEndpoint/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/","title":"cilium.v2.ciliumEnvoyConfig","text":""},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEnvoyConfig</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/","title":"cilium.v2.ciliumExternalWorkload","text":"<p>\"CiliumExternalWorkload is a Kubernetes Custom Resource that contains a specification for an external workload that can join the cluster.  The name of the CRD is the FQDN of the external workload, and it needs to match the name in the workload registration. The labels on the CRD object are the labels that will be used to allocate a Cilium Identity for the external workload. If 'io.kubernetes.pod.namespace' or 'io.kubernetes.pod.name' labels are not explicitly specified, they will be defaulted to 'default' and , respectively. 'io.cilium.k8s.policy.cluster' will always be defined as the name of the current cluster, which defaults to \\\"default\\\".\""},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withIpv4-Alloc-Cidr(ipv4_alloc_cidr)</code></li> <li><code>fn withIpv6-Alloc-Cidr(ipv6_alloc_cidr)</code></li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumExternalWorkload</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired configuration of the external Cilium workload.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-specwithipv4-alloc-cidr","title":"fn spec.withIpv4-Alloc-Cidr","text":"<pre><code>withIpv4-Alloc-Cidr(ipv4_alloc_cidr)\n</code></pre> <p>\"IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumExternalWorkload/#fn-specwithipv6-alloc-cidr","title":"fn spec.withIpv6-Alloc-Cidr","text":"<pre><code>withIpv6-Alloc-Cidr(ipv6_alloc_cidr)\n</code></pre> <p>\"IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/","title":"cilium.v2.ciliumIdentity","text":"<p>\"CiliumIdentity is a CRD that represents an identity managed by Cilium. It is intended as a backing store for identity allocation, acting as the global coordination backend, and can be used in place of a KVStore (such as etcd). The name of the CRD is the numeric identity and the labels on the CRD object are the the kubernetes sourced labels seen by cilium. This is currently the only label source possible when running under kubernetes. Non-kubernetes labels are filtered but all labels, from all sources, are places in the SecurityLabels field. These also include the source and are used to define the identity. The labels under metav1.ObjectMeta can be used when searching for CiliumIdentity instances that include particular labels. This can be done with invocations such as: \\n \\tkubectl get ciliumid -l 'foo=bar' \\n Each node using a ciliumidentity updates the status field with it's name and a timestamp when it first allocates or uses an identity, and periodically after that. It deletes its entry when no longer using this identity. cilium-operator uses the list of nodes in status to reference count users of this identity, and to expire stale usage.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSecurity-Labels(security_labels)</code></li> <li><code>fn withSecurity-LabelsMixin(security_labels)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumIdentity</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-withsecurity-labels","title":"fn withSecurity-Labels","text":"<pre><code>withSecurity-Labels(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-withsecurity-labelsmixin","title":"fn withSecurity-LabelsMixin","text":"<pre><code>withSecurity-LabelsMixin(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumIdentity/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/","title":"cilium.v2.ciliumLocalRedirectPolicy","text":"<p>\"CiliumLocalRedirectPolicy is a Kubernetes Custom Resource that contains a specification to redirect traffic locally within a node.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.redirectBackend</code><ul> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectBackend.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend</code><ul> <li><code>obj spec.redirectFrontend.addressMatcher</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.addressMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend.serviceMatcher</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.serviceMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumLocalRedirectPolicy</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired behavior of the local redirect policy.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description can be used by the creator of the policy to describe the purpose of this policy.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackend","title":"obj spec.redirectBackend","text":"<p>\"RedirectBackend specifies backend configuration to redirect traffic to. It can not be empty.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoports","title":"fn spec.redirectBackend.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoportsmixin","title":"fn spec.redirectBackend.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselector","title":"obj spec.redirectBackend.localEndpointSelector","text":"<p>\"LocalEndpointSelector selects node local pod(s) where traffic is redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressions","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressionsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabels","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabelsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselectormatchexpressions","title":"obj spec.redirectBackend.localEndpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithkey","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithoperator","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvalues","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendtoports","title":"obj spec.redirectBackend.toPorts","text":"<p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithname","title":"fn spec.redirectBackend.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithport","title":"fn spec.redirectBackend.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithprotocol","title":"fn spec.redirectBackend.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontend","title":"obj spec.redirectFrontend","text":"<p>\"RedirectFrontend specifies frontend configuration to redirect traffic from. It can not be empty.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatcher","title":"obj spec.redirectFrontend.addressMatcher","text":"<p>\"AddressMatcher is a tuple {IP, port, protocol} that matches traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithip","title":"fn spec.redirectFrontend.addressMatcher.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is a destination ip address for traffic to be redirected. \\n Example: When it is set to \\\"169.254.169.254\\\", traffic destined to \\\"169.254.169.254\\\" is redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoports","title":"fn spec.redirectFrontend.addressMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoportsmixin","title":"fn spec.redirectFrontend.addressMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatchertoports","title":"obj spec.redirectFrontend.addressMatcher.toPorts","text":"<p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithname","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithport","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithprotocol","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematcher","title":"obj spec.redirectFrontend.serviceMatcher","text":"<p>\"ServiceMatcher specifies Kubernetes service and port that matches traffic to be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithnamespace","title":"fn spec.redirectFrontend.serviceMatcher.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. The service namespace must match the namespace of the parent Local Redirect Policy.  For Cluster-wide Local Redirect Policy, this can be any namespace.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithservicename","title":"fn spec.redirectFrontend.serviceMatcher.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected. The service type needs to be ClusterIP. \\n Example: When this field is populated with 'serviceName:myService', all the traffic destined to the cluster IP of this service at the (specified) service port(s) will be redirected.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoports","title":"fn spec.redirectFrontend.serviceMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoportsmixin","title":"fn spec.redirectFrontend.serviceMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematchertoports","title":"obj spec.redirectFrontend.serviceMatcher.toPorts","text":"<p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithname","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithport","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.13/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithprotocol","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/","title":"cilium.v2.ciliumNetworkPolicy","text":"<p>\"CiliumNetworkPolicy is a Kubernetes third-party resource with an extended version of NetworkPolicy.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.auth</code><ul> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNetworkPolicy</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressauth","title":"obj spec.egress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressauthwithtype","title":"fn spec.egress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressauth","title":"obj spec.ingress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressauthwithtype","title":"fn spec.ingress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressauth","title":"obj specs.egress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressauthwithtype","title":"fn specs.egress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. \\n The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressauth","title":"obj specs.ingress.auth","text":"<p>\"Auth is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressauthwithtype","title":"fn specs.ingress.auth.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.13/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/","title":"cilium.v2.ciliumNode","text":"<p>\"CiliumNode represents a node managed by Cilium. It contains a specification to control various node specific configuration aspects and a status section to represent the status of the node.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withNodeidentity(nodeidentity)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.alibaba-cloud</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withCidr-Block(cidr_block)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> <li><code>fn withVswitch-Tags(vswitch_tags)</code></li> <li><code>fn withVswitch-TagsMixin(vswitch_tags)</code></li> <li><code>fn withVswitches(vswitches)</code></li> <li><code>fn withVswitchesMixin(vswitches)</code></li> </ul> </li> <li><code>obj spec.azure</code><ul> <li><code>fn withInterface-Name(interface_name)</code></li> </ul> </li> <li><code>obj spec.encryption</code><ul> <li><code>fn withKey(key)</code></li> </ul> </li> <li><code>obj spec.eni</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withDelete-On-Termination(delete_on_termination)</code></li> <li><code>fn withDisable-Prefix-Delegation(disable_prefix_delegation)</code></li> <li><code>fn withExclude-Interface-Tags(exclude_interface_tags)</code></li> <li><code>fn withExclude-Interface-TagsMixin(exclude_interface_tags)</code></li> <li><code>fn withFirst-Interface-Index(first_interface_index)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withNode-Subnet-Id(node_subnet_id)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withSubnet-Ids(subnet_ids)</code></li> <li><code>fn withSubnet-IdsMixin(subnet_ids)</code></li> <li><code>fn withSubnet-Tags(subnet_tags)</code></li> <li><code>fn withSubnet-TagsMixin(subnet_tags)</code></li> <li><code>fn withUse-Primary-Address(use_primary_address)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> </ul> </li> <li><code>obj spec.health</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ipam</code><ul> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMax-Allocate(max_allocate)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)</code></li> <li><code>fn withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)</code></li> <li><code>fn withPodCIDRs(podCIDRs)</code></li> <li><code>fn withPodCIDRsMixin(podCIDRs)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withPoolMixin(pool)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.13/cilium/v2/ciliumNode/#fields","title":"Fields","text":""},{"location":"1.13/cilium/v2/ciliumNode/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNode</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired specification/configuration of the node.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specwithinstance-id","title":"fn spec.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the identifier of the node. This is different from the node name which is typically the FQDN of the node. The InstanceID typically refers to the identifier used by the cloud provider or some other means of identification.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specwithnodeidentity","title":"fn spec.withNodeidentity","text":"<pre><code>withNodeidentity(nodeidentity)\n</code></pre> <p>\"NodeIdentity is the Cilium numeric identity allocated for the node, if any.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specaddresseswithip","title":"fn spec.addresses.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is an IP of a node\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the type of the node address\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specalibaba-cloud","title":"obj spec.alibaba-cloud","text":"<p>\"AlibabaCloud is the AlibabaCloud IPAM specific configuration.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithavailability-zone","title":"fn spec.alibaba-cloud.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithcidr-block","title":"fn spec.alibaba-cloud.withCidr-Block","text":"<pre><code>withCidr-Block(cidr_block)\n</code></pre> <p>\"CIDRBlock is vpc ipv4 CIDR\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithinstance-type","title":"fn spec.alibaba-cloud.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the ECS instance type, e.g. \\\"ecs.g6.2xlarge\\</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tags","title":"fn spec.alibaba-cloud.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tagsmixin","title":"fn spec.alibaba-cloud.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groups","title":"fn spec.alibaba-cloud.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groupsmixin","title":"fn spec.alibaba-cloud.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvpc-id","title":"fn spec.alibaba-cloud.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VPCID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tags","title":"fn spec.alibaba-cloud.withVswitch-Tags","text":"<pre><code>withVswitch-Tags(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tagsmixin","title":"fn spec.alibaba-cloud.withVswitch-TagsMixin","text":"<pre><code>withVswitch-TagsMixin(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitches","title":"fn spec.alibaba-cloud.withVswitches","text":"<pre><code>withVswitches(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitchesmixin","title":"fn spec.alibaba-cloud.withVswitchesMixin","text":"<pre><code>withVswitchesMixin(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specazure","title":"obj spec.azure","text":"<p>\"Azure is the Azure IPAM specific configuration.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specazurewithinterface-name","title":"fn spec.azure.withInterface-Name","text":"<pre><code>withInterface-Name(interface_name)\n</code></pre> <p>\"InterfaceName is the name of the interface the cilium-operator will use to allocate all the IPs on\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specencryption","title":"obj spec.encryption","text":"<p>\"Encryption is the encryption configuration of the node.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specencryptionwithkey","title":"fn spec.encryption.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the index to the key to use for encryption or 0 if encryption is disabled.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-speceni","title":"obj spec.eni","text":"<p>\"ENI is the AWS ENI specific configuration.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithavailability-zone","title":"fn spec.eni.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithdelete-on-termination","title":"fn spec.eni.withDelete-On-Termination","text":"<pre><code>withDelete-On-Termination(delete_on_termination)\n</code></pre> <p>\"DeleteOnTermination defines that the ENI should be deleted when the associated instance is terminated. If the parameter is not set the default behavior is to delete the ENI on instance termination.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithdisable-prefix-delegation","title":"fn spec.eni.withDisable-Prefix-Delegation","text":"<pre><code>withDisable-Prefix-Delegation(disable_prefix_delegation)\n</code></pre> <p>\"DisablePrefixDelegation determines whether ENI prefix delegation should be disabled on this node.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tags","title":"fn spec.eni.withExclude-Interface-Tags","text":"<pre><code>withExclude-Interface-Tags(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tagsmixin","title":"fn spec.eni.withExclude-Interface-TagsMixin","text":"<pre><code>withExclude-Interface-TagsMixin(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithfirst-interface-index","title":"fn spec.eni.withFirst-Interface-Index","text":"<pre><code>withFirst-Interface-Index(first_interface_index)\n</code></pre> <p>\"FirstInterfaceIndex is the index of the first ENI to use for IP allocation, e.g. if the node has eth0, eth1, eth2 and FirstInterfaceIndex is set to 1, then only eth1 and eth2 will be used for IP allocation, eth0 will be ignored for PodIP allocation.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithinstance-id","title":"fn spec.eni.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the AWS InstanceId of the node. The InstanceID is used to retrieve AWS metadata for the node. \\n OBSOLETE: This field is obsolete, please use Spec.InstanceID\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithinstance-type","title":"fn spec.eni.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the AWS EC2 instance type, e.g. \\\"m5.large\\</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithmax-above-watermark","title":"fn spec.eni.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MaxAboveWatermark\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithmin-allocate","title":"fn spec.eni.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MinAllocate\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithnode-subnet-id","title":"fn spec.eni.withNode-Subnet-Id","text":"<pre><code>withNode-Subnet-Id(node_subnet_id)\n</code></pre> <p>\"NodeSubnetID is the subnet of the primary ENI the instance was brought up with. It is used as a sensible default subnet to create ENIs in.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithpre-allocate","title":"fn spec.eni.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.PreAllocate\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tags","title":"fn spec.eni.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tagsmixin","title":"fn spec.eni.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groups","title":"fn spec.eni.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groupsmixin","title":"fn spec.eni.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsubnet-ids","title":"fn spec.eni.withSubnet-Ids","text":"<pre><code>withSubnet-Ids(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsubnet-idsmixin","title":"fn spec.eni.withSubnet-IdsMixin","text":"<pre><code>withSubnet-IdsMixin(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tags","title":"fn spec.eni.withSubnet-Tags","text":"<pre><code>withSubnet-Tags(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tagsmixin","title":"fn spec.eni.withSubnet-TagsMixin","text":"<pre><code>withSubnet-TagsMixin(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithuse-primary-address","title":"fn spec.eni.withUse-Primary-Address","text":"<pre><code>withUse-Primary-Address(use_primary_address)\n</code></pre> <p>\"UsePrimaryAddress determines whether an ENI's primary address should be available for allocations on the node\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-speceniwithvpc-id","title":"fn spec.eni.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VpcID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-spechealth","title":"obj spec.health","text":"<p>\"HealthAddressing is the addressing information for health connectivity checking.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-spechealthwithipv4","title":"fn spec.health.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre> <p>\"IPv4 is the IPv4 address of the IPv4 health endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-spechealthwithipv6","title":"fn spec.health.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre> <p>\"IPv6 is the IPv6 address of the IPv4 health endpoint.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specingress","title":"obj spec.ingress","text":"<p>\"IngressAddressing is the addressing information for Ingress listener.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specingresswithipv4","title":"fn spec.ingress.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specingresswithipv6","title":"fn spec.ingress.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre>"},{"location":"1.13/cilium/v2/ciliumNode/#obj-specipam","title":"obj spec.ipam","text":"<p>\"IPAM is the address management specification. This section can be populated by a user or it can be automatically populated by an IPAM operator.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithmax-above-watermark","title":"fn spec.ipam.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithmax-allocate","title":"fn spec.ipam.withMax-Allocate","text":"<pre><code>withMax-Allocate(max_allocate)\n</code></pre> <p>\"MaxAllocate is the maximum number of IPs that can be allocated to the node. When the current amount of allocated IPs will approach this value, the considered value for PreAllocate will decrease down to 0 in order to not attempt to allocate more addresses than defined.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithmin-allocate","title":"fn spec.ipam.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-allocation-threshold","title":"fn spec.ipam.withPod-Cidr-Allocation-Threshold","text":"<pre><code>withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)\n</code></pre> <p>\"PodCIDRAllocationThreshold defines the minimum number of free IPs which must be available to this node via its pod CIDR pool. If the total number of IP addresses in the pod CIDR pool is less than this value, the pod CIDRs currently in-use by this node will be marked as depleted and cilium-operator will allocate a new pod CIDR to this node. This value effectively defines the buffer of IP addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-release-threshold","title":"fn spec.ipam.withPod-Cidr-Release-Threshold","text":"<pre><code>withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)\n</code></pre> <p>\"PodCIDRReleaseThreshold defines the maximum number of free IPs which may be available to this node via its pod CIDR pool. While the total number of free IP addresses in the pod CIDR pool is larger than this value, cilium-agent will attempt to release currently unused pod CIDRs.\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpodcidrs","title":"fn spec.ipam.withPodCIDRs","text":"<pre><code>withPodCIDRs(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpodcidrsmixin","title":"fn spec.ipam.withPodCIDRsMixin","text":"<pre><code>withPodCIDRsMixin(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpool","title":"fn spec.ipam.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpoolmixin","title":"fn spec.ipam.withPoolMixin","text":"<pre><code>withPoolMixin(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.13/cilium/v2/ciliumNode/#fn-specipamwithpre-allocate","title":"fn spec.ipam.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.14/","title":"cilium","text":"<pre><code>local cilium = import \"github.com/jsonnet-libs/cilium-libsonnet/1.14/main.libsonnet\"\n</code></pre> <ul> <li>cilium</li> </ul>"},{"location":"1.14/cilium/","title":"cilium","text":"<ul> <li>v2</li> </ul>"},{"location":"1.14/cilium/v2/","title":"cilium.v2","text":"<ul> <li>ciliumClusterwideEnvoyConfig</li> <li>ciliumClusterwideNetworkPolicy</li> <li>ciliumEgressGatewayPolicy</li> <li>ciliumEndpoint</li> <li>ciliumEnvoyConfig</li> <li>ciliumExternalWorkload</li> <li>ciliumIdentity</li> <li>ciliumLocalRedirectPolicy</li> <li>ciliumNetworkPolicy</li> <li>ciliumNode</li> </ul>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/","title":"cilium.v2.ciliumClusterwideEnvoyConfig","text":""},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideEnvoyConfig</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/","title":"cilium.v2.ciliumClusterwideNetworkPolicy","text":"<p>\"CiliumClusterwideNetworkPolicy is a Kubernetes third-party resource with an modified version of CiliumNetworkPolicy which is cluster scoped rather than namespace scoped.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideNetworkPolicy</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressauthentication","title":"obj spec.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressauthenticationwithmode","title":"fn spec.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidrgroupref","title":"fn spec.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidrgroupref","title":"fn spec.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressauthentication","title":"obj spec.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressauthenticationwithmode","title":"fn spec.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidrgroupref","title":"fn spec.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidrgroupref","title":"fn spec.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressauthentication","title":"obj specs.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressauthenticationwithmode","title":"fn specs.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidrgroupref","title":"fn specs.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidrgroupref","title":"fn specs.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressauthentication","title":"obj specs.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressauthenticationwithmode","title":"fn specs.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidrgroupref","title":"fn specs.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidrgroupref","title":"fn specs.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/","title":"cilium.v2.ciliumEgressGatewayPolicy","text":""},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDestinationCIDRs(destinationCIDRs)</code></li> <li><code>fn withDestinationCIDRsMixin(destinationCIDRs)</code></li> <li><code>fn withExcludedCIDRs(excludedCIDRs)</code></li> <li><code>fn withExcludedCIDRsMixin(excludedCIDRs)</code></li> <li><code>fn withSelectors(selectors)</code></li> <li><code>fn withSelectorsMixin(selectors)</code></li> <li><code>obj spec.egressGateway</code><ul> <li><code>fn withEgressIP(egressIP)</code></li> <li><code>fn withInterface(interface)</code></li> <li><code>obj spec.egressGateway.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressGateway.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.selectors</code><ul> <li><code>obj spec.selectors.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.selectors.podSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.podSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEgressGatewayPolicy</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-spec","title":"obj spec","text":""},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrs","title":"fn spec.withDestinationCIDRs","text":"<pre><code>withDestinationCIDRs(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrsmixin","title":"fn spec.withDestinationCIDRsMixin","text":"<pre><code>withDestinationCIDRsMixin(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithexcludedcidrs","title":"fn spec.withExcludedCIDRs","text":"<pre><code>withExcludedCIDRs(excludedCIDRs)\n</code></pre> <p>\"ExcludedCIDRs is a list of destination CIDRs that will be excluded from the egress gateway redirection and SNAT logic. Should be a subset of destinationCIDRs otherwise it will not have any effect.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithexcludedcidrsmixin","title":"fn spec.withExcludedCIDRsMixin","text":"<pre><code>withExcludedCIDRsMixin(excludedCIDRs)\n</code></pre> <p>\"ExcludedCIDRs is a list of destination CIDRs that will be excluded from the egress gateway redirection and SNAT logic. Should be a subset of destinationCIDRs otherwise it will not have any effect.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectors","title":"fn spec.withSelectors","text":"<pre><code>withSelectors(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectorsmixin","title":"fn spec.withSelectorsMixin","text":"<pre><code>withSelectorsMixin(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgateway","title":"obj spec.egressGateway","text":"<p>\"EgressGateway is the gateway node responsible for SNATing traffic.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithegressip","title":"fn spec.egressGateway.withEgressIP","text":"<pre><code>withEgressIP(egressIP)\n</code></pre> <p>\"EgressIP is the source IP address that the egress traffic is SNATed with. \\n Example: When set to \\\"192.168.1.100\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with IP address 192.168.1.100. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithinterface","title":"fn spec.egressGateway.withInterface","text":"<pre><code>withInterface(interface)\n</code></pre> <p>\"Interface is the network interface to which the egress IP address that the traffic is SNATed with is assigned. \\n Example: When set to \\\"eth1\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with the first IPv4 address assigned to the eth1 interface. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselector","title":"obj spec.egressGateway.nodeSelector","text":"<p>\"This is a label selector which selects the node that should act as egress gateway for the given policy. In case multiple nodes are selected, only the first one in the lexical ordering over the node names will be used. This field follows standard label selector semantics.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressions","title":"fn spec.egressGateway.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressionsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabels","title":"fn spec.egressGateway.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabelsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselectormatchexpressions","title":"obj spec.egressGateway.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithkey","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithoperator","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvalues","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvaluesmixin","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectors","title":"obj spec.selectors","text":"<p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselector","title":"obj spec.selectors.namespaceSelector","text":"<p>\"Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressions","title":"fn spec.selectors.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.selectors.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabels","title":"fn spec.selectors.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabelsmixin","title":"fn spec.selectors.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselectormatchexpressions","title":"obj spec.selectors.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithkey","title":"fn spec.selectors.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithoperator","title":"fn spec.selectors.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvalues","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselector","title":"obj spec.selectors.podSelector","text":"<p>\"This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressions","title":"fn spec.selectors.podSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressionsmixin","title":"fn spec.selectors.podSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabels","title":"fn spec.selectors.podSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabelsmixin","title":"fn spec.selectors.podSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselectormatchexpressions","title":"obj spec.selectors.podSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithkey","title":"fn spec.selectors.podSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithoperator","title":"fn spec.selectors.podSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvalues","title":"fn spec.selectors.podSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.podSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/","title":"cilium.v2.ciliumEndpoint","text":"<p>\"CiliumEndpoint is the status of a Cilium policy rule.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEndpoint</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumEndpoint/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/","title":"cilium.v2.ciliumEnvoyConfig","text":""},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEnvoyConfig</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/","title":"cilium.v2.ciliumExternalWorkload","text":"<p>\"CiliumExternalWorkload is a Kubernetes Custom Resource that contains a specification for an external workload that can join the cluster.  The name of the CRD is the FQDN of the external workload, and it needs to match the name in the workload registration. The labels on the CRD object are the labels that will be used to allocate a Cilium Identity for the external workload. If 'io.kubernetes.pod.namespace' or 'io.kubernetes.pod.name' labels are not explicitly specified, they will be defaulted to 'default' and , respectively. 'io.cilium.k8s.policy.cluster' will always be defined as the name of the current cluster, which defaults to \\\"default\\\".\""},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withIpv4-Alloc-Cidr(ipv4_alloc_cidr)</code></li> <li><code>fn withIpv6-Alloc-Cidr(ipv6_alloc_cidr)</code></li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumExternalWorkload</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired configuration of the external Cilium workload.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-specwithipv4-alloc-cidr","title":"fn spec.withIpv4-Alloc-Cidr","text":"<pre><code>withIpv4-Alloc-Cidr(ipv4_alloc_cidr)\n</code></pre> <p>\"IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumExternalWorkload/#fn-specwithipv6-alloc-cidr","title":"fn spec.withIpv6-Alloc-Cidr","text":"<pre><code>withIpv6-Alloc-Cidr(ipv6_alloc_cidr)\n</code></pre> <p>\"IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/","title":"cilium.v2.ciliumIdentity","text":"<p>\"CiliumIdentity is a CRD that represents an identity managed by Cilium. It is intended as a backing store for identity allocation, acting as the global coordination backend, and can be used in place of a KVStore (such as etcd). The name of the CRD is the numeric identity and the labels on the CRD object are the kubernetes sourced labels seen by cilium. This is currently the only label source possible when running under kubernetes. Non-kubernetes labels are filtered but all labels, from all sources, are places in the SecurityLabels field. These also include the source and are used to define the identity. The labels under metav1.ObjectMeta can be used when searching for CiliumIdentity instances that include particular labels. This can be done with invocations such as: \\n \\tkubectl get ciliumid -l 'foo=bar'\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSecurity-Labels(security_labels)</code></li> <li><code>fn withSecurity-LabelsMixin(security_labels)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumIdentity</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-withsecurity-labels","title":"fn withSecurity-Labels","text":"<pre><code>withSecurity-Labels(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-withsecurity-labelsmixin","title":"fn withSecurity-LabelsMixin","text":"<pre><code>withSecurity-LabelsMixin(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumIdentity/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/","title":"cilium.v2.ciliumLocalRedirectPolicy","text":"<p>\"CiliumLocalRedirectPolicy is a Kubernetes Custom Resource that contains a specification to redirect traffic locally within a node.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.redirectBackend</code><ul> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectBackend.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend</code><ul> <li><code>obj spec.redirectFrontend.addressMatcher</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.addressMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend.serviceMatcher</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.serviceMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumLocalRedirectPolicy</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired behavior of the local redirect policy.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description can be used by the creator of the policy to describe the purpose of this policy.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackend","title":"obj spec.redirectBackend","text":"<p>\"RedirectBackend specifies backend configuration to redirect traffic to. It can not be empty.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoports","title":"fn spec.redirectBackend.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoportsmixin","title":"fn spec.redirectBackend.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselector","title":"obj spec.redirectBackend.localEndpointSelector","text":"<p>\"LocalEndpointSelector selects node local pod(s) where traffic is redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressions","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressionsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabels","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabelsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselectormatchexpressions","title":"obj spec.redirectBackend.localEndpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithkey","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithoperator","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvalues","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendtoports","title":"obj spec.redirectBackend.toPorts","text":"<p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithname","title":"fn spec.redirectBackend.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithport","title":"fn spec.redirectBackend.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithprotocol","title":"fn spec.redirectBackend.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontend","title":"obj spec.redirectFrontend","text":"<p>\"RedirectFrontend specifies frontend configuration to redirect traffic from. It can not be empty.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatcher","title":"obj spec.redirectFrontend.addressMatcher","text":"<p>\"AddressMatcher is a tuple {IP, port, protocol} that matches traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithip","title":"fn spec.redirectFrontend.addressMatcher.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is a destination ip address for traffic to be redirected. \\n Example: When it is set to \\\"169.254.169.254\\\", traffic destined to \\\"169.254.169.254\\\" is redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoports","title":"fn spec.redirectFrontend.addressMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoportsmixin","title":"fn spec.redirectFrontend.addressMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatchertoports","title":"obj spec.redirectFrontend.addressMatcher.toPorts","text":"<p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithname","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithport","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithprotocol","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematcher","title":"obj spec.redirectFrontend.serviceMatcher","text":"<p>\"ServiceMatcher specifies Kubernetes service and port that matches traffic to be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithnamespace","title":"fn spec.redirectFrontend.serviceMatcher.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. The service namespace must match the namespace of the parent Local Redirect Policy.  For Cluster-wide Local Redirect Policy, this can be any namespace.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithservicename","title":"fn spec.redirectFrontend.serviceMatcher.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected. The service type needs to be ClusterIP. \\n Example: When this field is populated with 'serviceName:myService', all the traffic destined to the cluster IP of this service at the (specified) service port(s) will be redirected.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoports","title":"fn spec.redirectFrontend.serviceMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoportsmixin","title":"fn spec.redirectFrontend.serviceMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematchertoports","title":"obj spec.redirectFrontend.serviceMatcher.toPorts","text":"<p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithname","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithport","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.14/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithprotocol","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/","title":"cilium.v2.ciliumNetworkPolicy","text":"<p>\"CiliumNetworkPolicy is a Kubernetes third-party resource with an extended version of NetworkPolicy.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNetworkPolicy</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressauthentication","title":"obj spec.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressauthenticationwithmode","title":"fn spec.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidrgroupref","title":"fn spec.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidrgroupref","title":"fn spec.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressauthentication","title":"obj spec.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressauthenticationwithmode","title":"fn spec.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidrgroupref","title":"fn spec.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidrgroupref","title":"fn spec.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressauthentication","title":"obj specs.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressauthenticationwithmode","title":"fn specs.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidrgroupref","title":"fn specs.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidrgroupref","title":"fn specs.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressauthentication","title":"obj specs.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressauthenticationwithmode","title":"fn specs.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidrgroupref","title":"fn specs.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\"   except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match,   www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported:  - \\\"produce\\\": Allow producing to the topics specified in the rule  - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidrgroupref","title":"fn specs.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.14/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/","title":"cilium.v2.ciliumNode","text":"<p>\"CiliumNode represents a node managed by Cilium. It contains a specification to control various node specific configuration aspects and a status section to represent the status of the node.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withNodeidentity(nodeidentity)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.alibaba-cloud</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withCidr-Block(cidr_block)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> <li><code>fn withVswitch-Tags(vswitch_tags)</code></li> <li><code>fn withVswitch-TagsMixin(vswitch_tags)</code></li> <li><code>fn withVswitches(vswitches)</code></li> <li><code>fn withVswitchesMixin(vswitches)</code></li> </ul> </li> <li><code>obj spec.azure</code><ul> <li><code>fn withInterface-Name(interface_name)</code></li> </ul> </li> <li><code>obj spec.encryption</code><ul> <li><code>fn withKey(key)</code></li> </ul> </li> <li><code>obj spec.eni</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withDelete-On-Termination(delete_on_termination)</code></li> <li><code>fn withDisable-Prefix-Delegation(disable_prefix_delegation)</code></li> <li><code>fn withExclude-Interface-Tags(exclude_interface_tags)</code></li> <li><code>fn withExclude-Interface-TagsMixin(exclude_interface_tags)</code></li> <li><code>fn withFirst-Interface-Index(first_interface_index)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withNode-Subnet-Id(node_subnet_id)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withSubnet-Ids(subnet_ids)</code></li> <li><code>fn withSubnet-IdsMixin(subnet_ids)</code></li> <li><code>fn withSubnet-Tags(subnet_tags)</code></li> <li><code>fn withSubnet-TagsMixin(subnet_tags)</code></li> <li><code>fn withUse-Primary-Address(use_primary_address)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> </ul> </li> <li><code>obj spec.health</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ipam</code><ul> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMax-Allocate(max_allocate)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)</code></li> <li><code>fn withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)</code></li> <li><code>fn withPodCIDRs(podCIDRs)</code></li> <li><code>fn withPodCIDRsMixin(podCIDRs)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withPoolMixin(pool)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>obj spec.ipam.pools</code><ul> <li><code>fn withAllocated(allocated)</code></li> <li><code>fn withAllocatedMixin(allocated)</code></li> <li><code>fn withRequested(requested)</code></li> <li><code>fn withRequestedMixin(requested)</code></li> <li><code>obj spec.ipam.pools.allocated</code><ul> <li><code>fn withCidrs(cidrs)</code></li> <li><code>fn withCidrsMixin(cidrs)</code></li> <li><code>fn withPool(pool)</code></li> </ul> </li> <li><code>obj spec.ipam.pools.requested</code><ul> <li><code>fn withPool(pool)</code></li> <li><code>obj spec.ipam.pools.requested.needed</code><ul> <li><code>fn withIpv4-Addrs(ipv4_addrs)</code></li> <li><code>fn withIpv6-Addrs(ipv6_addrs)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.14/cilium/v2/ciliumNode/#fields","title":"Fields","text":""},{"location":"1.14/cilium/v2/ciliumNode/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNode</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired specification/configuration of the node.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specwithinstance-id","title":"fn spec.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the identifier of the node. This is different from the node name which is typically the FQDN of the node. The InstanceID typically refers to the identifier used by the cloud provider or some other means of identification.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specwithnodeidentity","title":"fn spec.withNodeidentity","text":"<pre><code>withNodeidentity(nodeidentity)\n</code></pre> <p>\"NodeIdentity is the Cilium numeric identity allocated for the node, if any.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specaddresseswithip","title":"fn spec.addresses.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is an IP of a node\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the type of the node address\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specalibaba-cloud","title":"obj spec.alibaba-cloud","text":"<p>\"AlibabaCloud is the AlibabaCloud IPAM specific configuration.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithavailability-zone","title":"fn spec.alibaba-cloud.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithcidr-block","title":"fn spec.alibaba-cloud.withCidr-Block","text":"<pre><code>withCidr-Block(cidr_block)\n</code></pre> <p>\"CIDRBlock is vpc ipv4 CIDR\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithinstance-type","title":"fn spec.alibaba-cloud.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the ECS instance type, e.g. \\\"ecs.g6.2xlarge\\</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tags","title":"fn spec.alibaba-cloud.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tagsmixin","title":"fn spec.alibaba-cloud.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groups","title":"fn spec.alibaba-cloud.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groupsmixin","title":"fn spec.alibaba-cloud.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvpc-id","title":"fn spec.alibaba-cloud.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VPCID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tags","title":"fn spec.alibaba-cloud.withVswitch-Tags","text":"<pre><code>withVswitch-Tags(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tagsmixin","title":"fn spec.alibaba-cloud.withVswitch-TagsMixin","text":"<pre><code>withVswitch-TagsMixin(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitches","title":"fn spec.alibaba-cloud.withVswitches","text":"<pre><code>withVswitches(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitchesmixin","title":"fn spec.alibaba-cloud.withVswitchesMixin","text":"<pre><code>withVswitchesMixin(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specazure","title":"obj spec.azure","text":"<p>\"Azure is the Azure IPAM specific configuration.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specazurewithinterface-name","title":"fn spec.azure.withInterface-Name","text":"<pre><code>withInterface-Name(interface_name)\n</code></pre> <p>\"InterfaceName is the name of the interface the cilium-operator will use to allocate all the IPs on\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specencryption","title":"obj spec.encryption","text":"<p>\"Encryption is the encryption configuration of the node.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specencryptionwithkey","title":"fn spec.encryption.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the index to the key to use for encryption or 0 if encryption is disabled.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-speceni","title":"obj spec.eni","text":"<p>\"ENI is the AWS ENI specific configuration.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithavailability-zone","title":"fn spec.eni.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithdelete-on-termination","title":"fn spec.eni.withDelete-On-Termination","text":"<pre><code>withDelete-On-Termination(delete_on_termination)\n</code></pre> <p>\"DeleteOnTermination defines that the ENI should be deleted when the associated instance is terminated. If the parameter is not set the default behavior is to delete the ENI on instance termination.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithdisable-prefix-delegation","title":"fn spec.eni.withDisable-Prefix-Delegation","text":"<pre><code>withDisable-Prefix-Delegation(disable_prefix_delegation)\n</code></pre> <p>\"DisablePrefixDelegation determines whether ENI prefix delegation should be disabled on this node.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tags","title":"fn spec.eni.withExclude-Interface-Tags","text":"<pre><code>withExclude-Interface-Tags(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tagsmixin","title":"fn spec.eni.withExclude-Interface-TagsMixin","text":"<pre><code>withExclude-Interface-TagsMixin(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithfirst-interface-index","title":"fn spec.eni.withFirst-Interface-Index","text":"<pre><code>withFirst-Interface-Index(first_interface_index)\n</code></pre> <p>\"FirstInterfaceIndex is the index of the first ENI to use for IP allocation, e.g. if the node has eth0, eth1, eth2 and FirstInterfaceIndex is set to 1, then only eth1 and eth2 will be used for IP allocation, eth0 will be ignored for PodIP allocation.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithinstance-id","title":"fn spec.eni.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the AWS InstanceId of the node. The InstanceID is used to retrieve AWS metadata for the node. \\n OBSOLETE: This field is obsolete, please use Spec.InstanceID\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithinstance-type","title":"fn spec.eni.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the AWS EC2 instance type, e.g. \\\"m5.large\\</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithmax-above-watermark","title":"fn spec.eni.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MaxAboveWatermark\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithmin-allocate","title":"fn spec.eni.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MinAllocate\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithnode-subnet-id","title":"fn spec.eni.withNode-Subnet-Id","text":"<pre><code>withNode-Subnet-Id(node_subnet_id)\n</code></pre> <p>\"NodeSubnetID is the subnet of the primary ENI the instance was brought up with. It is used as a sensible default subnet to create ENIs in.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithpre-allocate","title":"fn spec.eni.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.PreAllocate\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tags","title":"fn spec.eni.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tagsmixin","title":"fn spec.eni.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groups","title":"fn spec.eni.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groupsmixin","title":"fn spec.eni.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsubnet-ids","title":"fn spec.eni.withSubnet-Ids","text":"<pre><code>withSubnet-Ids(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsubnet-idsmixin","title":"fn spec.eni.withSubnet-IdsMixin","text":"<pre><code>withSubnet-IdsMixin(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tags","title":"fn spec.eni.withSubnet-Tags","text":"<pre><code>withSubnet-Tags(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tagsmixin","title":"fn spec.eni.withSubnet-TagsMixin","text":"<pre><code>withSubnet-TagsMixin(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithuse-primary-address","title":"fn spec.eni.withUse-Primary-Address","text":"<pre><code>withUse-Primary-Address(use_primary_address)\n</code></pre> <p>\"UsePrimaryAddress determines whether an ENI's primary address should be available for allocations on the node\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-speceniwithvpc-id","title":"fn spec.eni.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VpcID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-spechealth","title":"obj spec.health","text":"<p>\"HealthAddressing is the addressing information for health connectivity checking.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-spechealthwithipv4","title":"fn spec.health.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre> <p>\"IPv4 is the IPv4 address of the IPv4 health endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-spechealthwithipv6","title":"fn spec.health.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre> <p>\"IPv6 is the IPv6 address of the IPv4 health endpoint.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specingress","title":"obj spec.ingress","text":"<p>\"IngressAddressing is the addressing information for Ingress listener.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specingresswithipv4","title":"fn spec.ingress.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specingresswithipv6","title":"fn spec.ingress.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specipam","title":"obj spec.ipam","text":"<p>\"IPAM is the address management specification. This section can be populated by a user or it can be automatically populated by an IPAM operator.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithmax-above-watermark","title":"fn spec.ipam.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithmax-allocate","title":"fn spec.ipam.withMax-Allocate","text":"<pre><code>withMax-Allocate(max_allocate)\n</code></pre> <p>\"MaxAllocate is the maximum number of IPs that can be allocated to the node. When the current amount of allocated IPs will approach this value, the considered value for PreAllocate will decrease down to 0 in order to not attempt to allocate more addresses than defined.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithmin-allocate","title":"fn spec.ipam.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-allocation-threshold","title":"fn spec.ipam.withPod-Cidr-Allocation-Threshold","text":"<pre><code>withPod-Cidr-Allocation-Threshold(pod_cidr_allocation_threshold)\n</code></pre> <p>\"PodCIDRAllocationThreshold defines the minimum number of free IPs which must be available to this node via its pod CIDR pool. If the total number of IP addresses in the pod CIDR pool is less than this value, the pod CIDRs currently in-use by this node will be marked as depleted and cilium-operator will allocate a new pod CIDR to this node. This value effectively defines the buffer of IP addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpod-cidr-release-threshold","title":"fn spec.ipam.withPod-Cidr-Release-Threshold","text":"<pre><code>withPod-Cidr-Release-Threshold(pod_cidr_release_threshold)\n</code></pre> <p>\"PodCIDRReleaseThreshold defines the maximum number of free IPs which may be available to this node via its pod CIDR pool. While the total number of free IP addresses in the pod CIDR pool is larger than this value, cilium-agent will attempt to release currently unused pod CIDRs.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpodcidrs","title":"fn spec.ipam.withPodCIDRs","text":"<pre><code>withPodCIDRs(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpodcidrsmixin","title":"fn spec.ipam.withPodCIDRsMixin","text":"<pre><code>withPodCIDRsMixin(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpool","title":"fn spec.ipam.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpoolmixin","title":"fn spec.ipam.withPoolMixin","text":"<pre><code>withPoolMixin(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipamwithpre-allocate","title":"fn spec.ipam.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specipampools","title":"obj spec.ipam.pools","text":"<p>\"Pools contains the list of assigned IPAM pools for this node.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolswithallocated","title":"fn spec.ipam.pools.withAllocated","text":"<pre><code>withAllocated(allocated)\n</code></pre> <p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolswithallocatedmixin","title":"fn spec.ipam.pools.withAllocatedMixin","text":"<pre><code>withAllocatedMixin(allocated)\n</code></pre> <p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolswithrequested","title":"fn spec.ipam.pools.withRequested","text":"<pre><code>withRequested(requested)\n</code></pre> <p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolswithrequestedmixin","title":"fn spec.ipam.pools.withRequestedMixin","text":"<pre><code>withRequestedMixin(requested)\n</code></pre> <p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specipampoolsallocated","title":"obj spec.ipam.pools.allocated","text":"<p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithcidrs","title":"fn spec.ipam.pools.allocated.withCidrs","text":"<pre><code>withCidrs(cidrs)\n</code></pre> <p>\"CIDRs contains a list of pod CIDRs currently allocated from this pool\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithcidrsmixin","title":"fn spec.ipam.pools.allocated.withCidrsMixin","text":"<pre><code>withCidrsMixin(cidrs)\n</code></pre> <p>\"CIDRs contains a list of pod CIDRs currently allocated from this pool\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithpool","title":"fn spec.ipam.pools.allocated.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the name of the IPAM pool backing this allocation\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specipampoolsrequested","title":"obj spec.ipam.pools.requested","text":"<p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsrequestedwithpool","title":"fn spec.ipam.pools.requested.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the name of the IPAM pool backing this request\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#obj-specipampoolsrequestedneeded","title":"obj spec.ipam.pools.requested.needed","text":"<p>\"Needed indicates how many IPs out of the above Pool this node requests from the operator. The operator runs a reconciliation loop to ensure each node always has enough PodCIDRs allocated in each pool to fulfill the requested number of IPs here.\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsrequestedneededwithipv4-addrs","title":"fn spec.ipam.pools.requested.needed.withIpv4-Addrs","text":"<pre><code>withIpv4-Addrs(ipv4_addrs)\n</code></pre> <p>\"IPv4Addrs contains the number of requested IPv4 addresses out of a given pool\"</p>"},{"location":"1.14/cilium/v2/ciliumNode/#fn-specipampoolsrequestedneededwithipv6-addrs","title":"fn spec.ipam.pools.requested.needed.withIpv6-Addrs","text":"<pre><code>withIpv6-Addrs(ipv6_addrs)\n</code></pre> <p>\"IPv6Addrs contains the number of requested IPv6 addresses out of a given pool\"</p>"},{"location":"1.15/","title":"cilium","text":"<pre><code>local cilium = import \"github.com/jsonnet-libs/cilium-libsonnet/1.15/main.libsonnet\"\n</code></pre> <ul> <li>cilium</li> </ul>"},{"location":"1.15/cilium/","title":"cilium","text":"<ul> <li>v2</li> </ul>"},{"location":"1.15/cilium/v2/","title":"cilium.v2","text":"<ul> <li>ciliumClusterwideEnvoyConfig</li> <li>ciliumClusterwideNetworkPolicy</li> <li>ciliumEgressGatewayPolicy</li> <li>ciliumEndpoint</li> <li>ciliumEnvoyConfig</li> <li>ciliumExternalWorkload</li> <li>ciliumIdentity</li> <li>ciliumLocalRedirectPolicy</li> <li>ciliumNetworkPolicy</li> <li>ciliumNode</li> </ul>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/","title":"cilium.v2.ciliumClusterwideEnvoyConfig","text":""},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideEnvoyConfig</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/","title":"cilium.v2.ciliumClusterwideNetworkPolicy","text":"<p>\"CiliumClusterwideNetworkPolicy is a Kubernetes third-party resource with an modified version of CiliumNetworkPolicy which is cluster scoped rather than namespace scoped.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumClusterwideNetworkPolicy</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressauthentication","title":"obj spec.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressauthenticationwithmode","title":"fn spec.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithcidrgroupref","title":"fn spec.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithcidrgroupref","title":"fn spec.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressauthentication","title":"obj spec.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressauthenticationwithmode","title":"fn spec.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithcidrgroupref","title":"fn spec.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidrgroupref","title":"fn spec.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressauthentication","title":"obj specs.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressauthenticationwithmode","title":"fn specs.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithcidrgroupref","title":"fn specs.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithcidrgroupref","title":"fn specs.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressauthentication","title":"obj specs.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressauthenticationwithmode","title":"fn specs.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithcidrgroupref","title":"fn specs.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidrgroupref","title":"fn specs.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumClusterwideNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/","title":"cilium.v2.ciliumEgressGatewayPolicy","text":""},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDestinationCIDRs(destinationCIDRs)</code></li> <li><code>fn withDestinationCIDRsMixin(destinationCIDRs)</code></li> <li><code>fn withExcludedCIDRs(excludedCIDRs)</code></li> <li><code>fn withExcludedCIDRsMixin(excludedCIDRs)</code></li> <li><code>fn withSelectors(selectors)</code></li> <li><code>fn withSelectorsMixin(selectors)</code></li> <li><code>obj spec.egressGateway</code><ul> <li><code>fn withEgressIP(egressIP)</code></li> <li><code>fn withInterface(interface)</code></li> <li><code>obj spec.egressGateway.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressGateway.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.selectors</code><ul> <li><code>obj spec.selectors.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.selectors.podSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.selectors.podSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEgressGatewayPolicy</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-spec","title":"obj spec","text":""},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrs","title":"fn spec.withDestinationCIDRs","text":"<pre><code>withDestinationCIDRs(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithdestinationcidrsmixin","title":"fn spec.withDestinationCIDRsMixin","text":"<pre><code>withDestinationCIDRsMixin(destinationCIDRs)\n</code></pre> <p>\"DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithexcludedcidrs","title":"fn spec.withExcludedCIDRs","text":"<pre><code>withExcludedCIDRs(excludedCIDRs)\n</code></pre> <p>\"ExcludedCIDRs is a list of destination CIDRs that will be excluded from the egress gateway redirection and SNAT logic. Should be a subset of destinationCIDRs otherwise it will not have any effect.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithexcludedcidrsmixin","title":"fn spec.withExcludedCIDRsMixin","text":"<pre><code>withExcludedCIDRsMixin(excludedCIDRs)\n</code></pre> <p>\"ExcludedCIDRs is a list of destination CIDRs that will be excluded from the egress gateway redirection and SNAT logic. Should be a subset of destinationCIDRs otherwise it will not have any effect.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectors","title":"fn spec.withSelectors","text":"<pre><code>withSelectors(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specwithselectorsmixin","title":"fn spec.withSelectorsMixin","text":"<pre><code>withSelectorsMixin(selectors)\n</code></pre> <p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgateway","title":"obj spec.egressGateway","text":"<p>\"EgressGateway is the gateway node responsible for SNATing traffic.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithegressip","title":"fn spec.egressGateway.withEgressIP","text":"<pre><code>withEgressIP(egressIP)\n</code></pre> <p>\"EgressIP is the source IP address that the egress traffic is SNATed with. \\n Example: When set to \\\"192.168.1.100\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with IP address 192.168.1.100. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaywithinterface","title":"fn spec.egressGateway.withInterface","text":"<pre><code>withInterface(interface)\n</code></pre> <p>\"Interface is the network interface to which the egress IP address that the traffic is SNATed with is assigned. \\n Example: When set to \\\"eth1\\\", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with the first IPv4 address assigned to the eth1 interface. \\n When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselector","title":"obj spec.egressGateway.nodeSelector","text":"<p>\"This is a label selector which selects the node that should act as egress gateway for the given policy. In case multiple nodes are selected, only the first one in the lexical ordering over the node names will be used. This field follows standard label selector semantics.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressions","title":"fn spec.egressGateway.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchexpressionsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabels","title":"fn spec.egressGateway.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectorwithmatchlabelsmixin","title":"fn spec.egressGateway.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specegressgatewaynodeselectormatchexpressions","title":"obj spec.egressGateway.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithkey","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithoperator","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvalues","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specegressgatewaynodeselectormatchexpressionswithvaluesmixin","title":"fn spec.egressGateway.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectors","title":"obj spec.selectors","text":"<p>\"Egress represents a list of rules by which egress traffic is filtered from the source pods.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselector","title":"obj spec.selectors.namespaceSelector","text":"<p>\"Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressions","title":"fn spec.selectors.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.selectors.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabels","title":"fn spec.selectors.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectorwithmatchlabelsmixin","title":"fn spec.selectors.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorsnamespaceselectormatchexpressions","title":"obj spec.selectors.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithkey","title":"fn spec.selectors.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithoperator","title":"fn spec.selectors.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvalues","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorsnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselector","title":"obj spec.selectors.podSelector","text":"<p>\"This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressions","title":"fn spec.selectors.podSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchexpressionsmixin","title":"fn spec.selectors.podSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabels","title":"fn spec.selectors.podSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectorwithmatchlabelsmixin","title":"fn spec.selectors.podSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#obj-specselectorspodselectormatchexpressions","title":"obj spec.selectors.podSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithkey","title":"fn spec.selectors.podSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithoperator","title":"fn spec.selectors.podSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvalues","title":"fn spec.selectors.podSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumEgressGatewayPolicy/#fn-specselectorspodselectormatchexpressionswithvaluesmixin","title":"fn spec.selectors.podSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/","title":"cilium.v2.ciliumEndpoint","text":"<p>\"CiliumEndpoint is the status of a Cilium policy rule.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEndpoint</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumEndpoint/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/","title":"cilium.v2.ciliumEnvoyConfig","text":""},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackendServices(backendServices)</code></li> <li><code>fn withBackendServicesMixin(backendServices)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withServices(services)</code></li> <li><code>fn withServicesMixin(services)</code></li> <li><code>obj spec.backendServices</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNumber(number)</code></li> <li><code>fn withNumberMixin(number)</code></li> </ul> </li> <li><code>obj spec.services</code><ul> <li><code>fn withListener(listener)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumEnvoyConfig</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#obj-spec","title":"obj spec","text":""},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservices","title":"fn spec.withBackendServices","text":"<pre><code>withBackendServices(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithbackendservicesmixin","title":"fn spec.withBackendServicesMixin","text":"<pre><code>withBackendServicesMixin(backendServices)\n</code></pre> <p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithresources","title":"fn spec.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithresourcesmixin","title":"fn spec.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Envoy xDS resources, a list of the following Envoy resource types: type.googleapis.com/envoy.config.listener.v3.Listener, type.googleapis.com/envoy.config.route.v3.RouteConfiguration, type.googleapis.com/envoy.config.cluster.v3.Cluster, type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment, and type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithservices","title":"fn spec.withServices","text":"<pre><code>withServices(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specwithservicesmixin","title":"fn spec.withServicesMixin","text":"<pre><code>withServicesMixin(services)\n</code></pre> <p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#obj-specbackendservices","title":"obj spec.backendServices","text":"<p>\"BackendServices specifies Kubernetes services whose backends are automatically synced to Envoy using EDS.  Traffic for these services is not forwarded to an Envoy listener. This allows an Envoy listener load balance traffic to these backends while normal Cilium service load balancing takes care of balancing traffic for these services at the same time.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithname","title":"fn spec.backendServices.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnamespace","title":"fn spec.backendServices.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace defaults to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumber","title":"fn spec.backendServices.withNumber","text":"<pre><code>withNumber(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specbackendserviceswithnumbermixin","title":"fn spec.backendServices.withNumberMixin","text":"<pre><code>withNumberMixin(number)\n</code></pre> <p>\"Port is the port number, which can be used for filtering in case of underlying is exposing multiple port numbers.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#obj-specservices","title":"obj spec.services","text":"<p>\"Services specifies Kubernetes services for which traffic is forwarded to an Envoy listener for L7 load balancing. Backends of these services are automatically synced to Envoy usign EDS.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithlistener","title":"fn spec.services.withListener","text":"<pre><code>withListener(listener)\n</code></pre> <p>\"Listener specifies the name of the Envoy listener the service traffic is redirected to. The listener must be specified in the Envoy 'resources' of the same CiliumEnvoyConfig. \\n If omitted, the first listener specified in 'resources' is used.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithname","title":"fn spec.services.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumEnvoyConfig/#fn-specserviceswithnamespace","title":"fn spec.services.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. In CiliumEnvoyConfig namespace this is overridden to the namespace of the CEC, In CiliumClusterwideEnvoyConfig namespace defaults to \\\"default\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/","title":"cilium.v2.ciliumExternalWorkload","text":"<p>\"CiliumExternalWorkload is a Kubernetes Custom Resource that contains a specification for an external workload that can join the cluster.  The name of the CRD is the FQDN of the external workload, and it needs to match the name in the workload registration. The labels on the CRD object are the labels that will be used to allocate a Cilium Identity for the external workload. If 'io.kubernetes.pod.namespace' or 'io.kubernetes.pod.name' labels are not explicitly specified, they will be defaulted to 'default' and , respectively. 'io.cilium.k8s.policy.cluster' will always be defined as the name of the current cluster, which defaults to \\\"default\\\".\""},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withIpv4-Alloc-Cidr(ipv4_alloc_cidr)</code></li> <li><code>fn withIpv6-Alloc-Cidr(ipv6_alloc_cidr)</code></li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumExternalWorkload</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired configuration of the external Cilium workload.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-specwithipv4-alloc-cidr","title":"fn spec.withIpv4-Alloc-Cidr","text":"<pre><code>withIpv4-Alloc-Cidr(ipv4_alloc_cidr)\n</code></pre> <p>\"IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumExternalWorkload/#fn-specwithipv6-alloc-cidr","title":"fn spec.withIpv6-Alloc-Cidr","text":"<pre><code>withIpv6-Alloc-Cidr(ipv6_alloc_cidr)\n</code></pre> <p>\"IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/","title":"cilium.v2.ciliumIdentity","text":"<p>\"CiliumIdentity is a CRD that represents an identity managed by Cilium. It is intended as a backing store for identity allocation, acting as the global coordination backend, and can be used in place of a KVStore (such as etcd). The name of the CRD is the numeric identity and the labels on the CRD object are the kubernetes sourced labels seen by cilium. This is currently the only label source possible when running under kubernetes. Non-kubernetes labels are filtered but all labels, from all sources, are places in the SecurityLabels field. These also include the source and are used to define the identity. The labels under metav1.ObjectMeta can be used when searching for CiliumIdentity instances that include particular labels. This can be done with invocations such as: \\n kubectl get ciliumid -l 'foo=bar'\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSecurity-Labels(security_labels)</code></li> <li><code>fn withSecurity-LabelsMixin(security_labels)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumIdentity</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-withsecurity-labels","title":"fn withSecurity-Labels","text":"<pre><code>withSecurity-Labels(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-withsecurity-labelsmixin","title":"fn withSecurity-LabelsMixin","text":"<pre><code>withSecurity-LabelsMixin(security_labels)\n</code></pre> <p>\"SecurityLabels is the source-of-truth set of labels for this identity.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumIdentity/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/","title":"cilium.v2.ciliumLocalRedirectPolicy","text":"<p>\"CiliumLocalRedirectPolicy is a Kubernetes Custom Resource that contains a specification to redirect traffic locally within a node.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.redirectBackend</code><ul> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.redirectBackend.localEndpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectBackend.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend</code><ul> <li><code>obj spec.redirectFrontend.addressMatcher</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.addressMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.redirectFrontend.serviceMatcher</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.redirectFrontend.serviceMatcher.toPorts</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumLocalRedirectPolicy</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired behavior of the local redirect policy.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description can be used by the creator of the policy to describe the purpose of this policy.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackend","title":"obj spec.redirectBackend","text":"<p>\"RedirectBackend specifies backend configuration to redirect traffic to. It can not be empty.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoports","title":"fn spec.redirectBackend.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendwithtoportsmixin","title":"fn spec.redirectBackend.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselector","title":"obj spec.redirectBackend.localEndpointSelector","text":"<p>\"LocalEndpointSelector selects node local pod(s) where traffic is redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressions","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchexpressionsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabels","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectorwithmatchlabelsmixin","title":"fn spec.redirectBackend.localEndpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendlocalendpointselectormatchexpressions","title":"obj spec.redirectBackend.localEndpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithkey","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithoperator","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvalues","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendlocalendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.redirectBackend.localEndpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectbackendtoports","title":"obj spec.redirectBackend.toPorts","text":"<p>\"ToPorts is a list of L4 ports with protocol of node local pod(s) where traffic is redirected to. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithname","title":"fn spec.redirectBackend.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithport","title":"fn spec.redirectBackend.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectbackendtoportswithprotocol","title":"fn spec.redirectBackend.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontend","title":"obj spec.redirectFrontend","text":"<p>\"RedirectFrontend specifies frontend configuration to redirect traffic from. It can not be empty.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatcher","title":"obj spec.redirectFrontend.addressMatcher","text":"<p>\"AddressMatcher is a tuple {IP, port, protocol} that matches traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithip","title":"fn spec.redirectFrontend.addressMatcher.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is a destination ip address for traffic to be redirected. \\n Example: When it is set to \\\"169.254.169.254\\\", traffic destined to \\\"169.254.169.254\\\" is redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoports","title":"fn spec.redirectFrontend.addressMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatcherwithtoportsmixin","title":"fn spec.redirectFrontend.addressMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendaddressmatchertoports","title":"obj spec.redirectFrontend.addressMatcher.toPorts","text":"<p>\"ToPorts is a list of destination L4 ports with protocol for traffic to be redirected. When multiple ports are specified, the ports must be named. \\n Example: When set to Port: \\\"53\\\" and Protocol: UDP, traffic destined to port '53' with UDP protocol is redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithname","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithport","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendaddressmatchertoportswithprotocol","title":"fn spec.redirectFrontend.addressMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematcher","title":"obj spec.redirectFrontend.serviceMatcher","text":"<p>\"ServiceMatcher specifies Kubernetes service and port that matches traffic to be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithnamespace","title":"fn spec.redirectFrontend.serviceMatcher.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the Kubernetes service namespace. The service namespace must match the namespace of the parent Local Redirect Policy.  For Cluster-wide Local Redirect Policy, this can be any namespace.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithservicename","title":"fn spec.redirectFrontend.serviceMatcher.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre> <p>\"Name is the name of a destination Kubernetes service that identifies traffic to be redirected. The service type needs to be ClusterIP. \\n Example: When this field is populated with 'serviceName:myService', all the traffic destined to the cluster IP of this service at the (specified) service port(s) will be redirected.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoports","title":"fn spec.redirectFrontend.serviceMatcher.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematcherwithtoportsmixin","title":"fn spec.redirectFrontend.serviceMatcher.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#obj-specredirectfrontendservicematchertoports","title":"obj spec.redirectFrontend.serviceMatcher.toPorts","text":"<p>\"ToPorts is a list of destination service L4 ports with protocol for traffic to be redirected. If not specified, traffic for all the service ports will be redirected. When multiple ports are specified, the ports must be named.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithname","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithport","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. The string will be strictly parsed as a single uint16.\"</p>"},{"location":"1.15/cilium/v2/ciliumLocalRedirectPolicy/#fn-specredirectfrontendservicematchertoportswithprotocol","title":"fn spec.redirectFrontend.serviceMatcher.toPorts.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. Accepted values: \\\"TCP\\\", \\\"UDP\\</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/","title":"cilium.v2.ciliumNetworkPolicy","text":"<p>\"CiliumNetworkPolicy is a Kubernetes third-party resource with an extended version of NetworkPolicy.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpecs(specs)</code></li> <li><code>fn withSpecsMixin(specs)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj spec.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toGroups</code><ul> <li><code>obj spec.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egress.toServices</code><ul> <li><code>obj spec.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj spec.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toGroups</code><ul> <li><code>obj spec.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.egressDeny.toServices</code><ul> <li><code>obj spec.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj spec.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj spec.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj spec.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj spec.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj spec.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj spec.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj spec.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj spec.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs</code><ul> <li><code>fn withDescription(description)</code></li> <li><code>fn withEgress(egress)</code></li> <li><code>fn withEgressDeny(egressDeny)</code></li> <li><code>fn withEgressDenyMixin(egressDeny)</code></li> <li><code>fn withEgressMixin(egress)</code></li> <li><code>fn withIngress(ingress)</code></li> <li><code>fn withIngressDeny(ingressDeny)</code></li> <li><code>fn withIngressDenyMixin(ingressDeny)</code></li> <li><code>fn withIngressMixin(ingress)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>obj specs.egress</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToFQDNs(toFQDNs)</code></li> <li><code>fn withToFQDNsMixin(toFQDNs)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.egress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egress.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toFQDNs</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toGroups</code><ul> <li><code>obj specs.egress.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.egress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.egress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.egress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.egress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.egress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egress.toServices</code><ul> <li><code>obj specs.egress.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egress.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny</code><ul> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToCIDR(toCIDR)</code></li> <li><code>fn withToCIDRMixin(toCIDR)</code></li> <li><code>fn withToCIDRSet(toCIDRSet)</code></li> <li><code>fn withToCIDRSetMixin(toCIDRSet)</code></li> <li><code>fn withToEndpoints(toEndpoints)</code></li> <li><code>fn withToEndpointsMixin(toEndpoints)</code></li> <li><code>fn withToEntities(toEntities)</code></li> <li><code>fn withToEntitiesMixin(toEntities)</code></li> <li><code>fn withToGroups(toGroups)</code></li> <li><code>fn withToGroupsMixin(toGroups)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>fn withToRequires(toRequires)</code></li> <li><code>fn withToRequiresMixin(toRequires)</code></li> <li><code>fn withToServices(toServices)</code></li> <li><code>fn withToServicesMixin(toServices)</code></li> <li><code>obj specs.egressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.egressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toGroups</code><ul> <li><code>obj specs.egressDeny.toGroups.aws</code><ul> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withSecurityGroupsIds(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsIdsMixin(securityGroupsIds)</code></li> <li><code>fn withSecurityGroupsNames(securityGroupsNames)</code></li> <li><code>fn withSecurityGroupsNamesMixin(securityGroupsNames)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.egressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.egressDeny.toServices</code><ul> <li><code>obj specs.egressDeny.toServices.k8sService</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withServiceName(serviceName)</code></li> </ul> </li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector</code><ul> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.endpointSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.endpointSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingress.authentication</code><ul> <li><code>fn withMode(mode)</code></li> </ul> </li> <li><code>obj specs.ingress.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingress.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingress.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingress.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withServerNames(serverNames)</code></li> <li><code>fn withServerNamesMixin(serverNames)</code></li> <li><code>obj specs.ingress.toPorts.listener</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj specs.ingress.toPorts.listener.envoyConfig</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.originatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.originatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules</code><ul> <li><code>fn withDns(dns)</code></li> <li><code>fn withDnsMixin(dns)</code></li> <li><code>fn withHttp(http)</code></li> <li><code>fn withHttpMixin(http)</code></li> <li><code>fn withKafka(kafka)</code></li> <li><code>fn withKafkaMixin(kafka)</code></li> <li><code>fn withL7(l7)</code></li> <li><code>fn withL7Mixin(l7)</code></li> <li><code>fn withL7proto(l7proto)</code></li> <li><code>obj specs.ingress.toPorts.rules.dns</code><ul> <li><code>fn withMatchName(matchName)</code></li> <li><code>fn withMatchPattern(matchPattern)</code></li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.http</code><ul> <li><code>fn withHeaderMatches(headerMatches)</code></li> <li><code>fn withHeaderMatchesMixin(headerMatches)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withHost(host)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches</code><ul> <li><code>fn withMismatch(mismatch)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj specs.ingress.toPorts.rules.http.headerMatches.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.rules.kafka</code><ul> <li><code>fn withApiKey(apiKey)</code></li> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withClientID(clientID)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withTopic(topic)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingress.toPorts.terminatingTLS</code><ul> <li><code>fn withCertificate(certificate)</code></li> <li><code>fn withPrivateKey(privateKey)</code></li> <li><code>fn withTrustedCA(trustedCA)</code></li> <li><code>obj specs.ingress.toPorts.terminatingTLS.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny</code><ul> <li><code>fn withFromCIDR(fromCIDR)</code></li> <li><code>fn withFromCIDRMixin(fromCIDR)</code></li> <li><code>fn withFromCIDRSet(fromCIDRSet)</code></li> <li><code>fn withFromCIDRSetMixin(fromCIDRSet)</code></li> <li><code>fn withFromEndpoints(fromEndpoints)</code></li> <li><code>fn withFromEndpointsMixin(fromEndpoints)</code></li> <li><code>fn withFromEntities(fromEntities)</code></li> <li><code>fn withFromEntitiesMixin(fromEntities)</code></li> <li><code>fn withFromRequires(fromRequires)</code></li> <li><code>fn withFromRequiresMixin(fromRequires)</code></li> <li><code>fn withIcmps(icmps)</code></li> <li><code>fn withIcmpsMixin(icmps)</code></li> <li><code>fn withToPorts(toPorts)</code></li> <li><code>fn withToPortsMixin(toPorts)</code></li> <li><code>obj specs.ingressDeny.fromCIDRSet</code><ul> <li><code>fn withCidr(cidr)</code></li> <li><code>fn withCidrGroupRef(cidrGroupRef)</code></li> <li><code>fn withExcept(except)</code></li> <li><code>fn withExceptMixin(except)</code></li> </ul> </li> <li><code>obj specs.ingressDeny.fromEndpoints</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromEndpoints.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.fromRequires</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.ingressDeny.fromRequires.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.icmps</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>obj specs.ingressDeny.icmps.fields</code><ul> <li><code>fn withFamily(family)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj specs.ingressDeny.toPorts</code><ul> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>obj specs.ingressDeny.toPorts.ports</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj specs.labels</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withSource(source)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj specs.nodeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj specs.nodeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNetworkPolicy</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-withspecs","title":"fn withSpecs","text":"<pre><code>withSpecs(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-withspecsmixin","title":"fn withSpecsMixin","text":"<pre><code>withSpecsMixin(specs)\n</code></pre> <p>\"Specs is a list of desired Cilium specific rule specification.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithegress","title":"fn spec.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdeny","title":"fn spec.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressdenymixin","title":"fn spec.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithegressmixin","title":"fn spec.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithingress","title":"fn spec.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdeny","title":"fn spec.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressdenymixin","title":"fn spec.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithingressmixin","title":"fn spec.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabels","title":"fn spec.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specwithlabelsmixin","title":"fn spec.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegress","title":"obj spec.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmps","title":"fn spec.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithicmpsmixin","title":"fn spec.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidr","title":"fn spec.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrmixin","title":"fn spec.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrset","title":"fn spec.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtocidrsetmixin","title":"fn spec.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpoints","title":"fn spec.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoendpointsmixin","title":"fn spec.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentities","title":"fn spec.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoentitiesmixin","title":"fn spec.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdns","title":"fn spec.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtofqdnsmixin","title":"fn spec.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroups","title":"fn spec.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtogroupsmixin","title":"fn spec.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoports","title":"fn spec.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoportsmixin","title":"fn spec.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequires","title":"fn spec.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtorequiresmixin","title":"fn spec.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservices","title":"fn spec.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresswithtoservicesmixin","title":"fn spec.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressauthentication","title":"obj spec.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressauthenticationwithmode","title":"fn spec.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmps","title":"obj spec.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfields","title":"fn spec.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpswithfieldsmixin","title":"fn spec.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressicmpsfields","title":"obj spec.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithfamily","title":"fn spec.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressicmpsfieldswithtype","title":"fn spec.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstocidrset","title":"obj spec.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidr","title":"fn spec.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithcidrgroupref","title":"fn spec.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexcept","title":"fn spec.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstocidrsetwithexceptmixin","title":"fn spec.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpoints","title":"obj spec.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressions","title":"fn spec.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchexpressionsmixin","title":"fn spec.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabels","title":"fn spec.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointswithmatchlabelsmixin","title":"fn spec.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoendpointsmatchexpressions","title":"obj spec.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithkey","title":"fn spec.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithoperator","title":"fn spec.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvalues","title":"fn spec.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstofqdns","title":"obj spec.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchname","title":"fn spec.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstofqdnswithmatchpattern","title":"fn spec.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroups","title":"obj spec.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstogroupsaws","title":"obj spec.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabels","title":"fn spec.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithlabelsmixin","title":"fn spec.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithregion","title":"fn spec.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsids","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnames","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoports","title":"obj spec.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithports","title":"fn spec.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithportsmixin","title":"fn spec.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernames","title":"fn spec.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportswithservernamesmixin","title":"fn spec.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistener","title":"obj spec.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerwithname","title":"fn spec.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportslistenerenvoyconfig","title":"obj spec.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithkind","title":"fn spec.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportslistenerenvoyconfigwithname","title":"fn spec.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtls","title":"obj spec.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithcertificate","title":"fn spec.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithprivatekey","title":"fn spec.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlswithtrustedca","title":"fn spec.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsoriginatingtlssecret","title":"obj spec.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithname","title":"fn spec.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsports","title":"obj spec.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithport","title":"fn spec.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsportswithprotocol","title":"fn spec.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrules","title":"obj spec.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdns","title":"fn spec.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithdnsmixin","title":"fn spec.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttp","title":"fn spec.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithhttpmixin","title":"fn spec.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafka","title":"fn spec.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithkafkamixin","title":"fn spec.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7","title":"fn spec.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7mixin","title":"fn spec.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleswithl7proto","title":"fn spec.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsrulesdns","title":"obj spec.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchname","title":"fn spec.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsrulesdnswithmatchpattern","title":"fn spec.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttp","title":"obj spec.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatches","title":"fn spec.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheaders","title":"fn spec.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithheadersmixin","title":"fn spec.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithhost","title":"fn spec.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithmethod","title":"fn spec.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpwithpath","title":"fn spec.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatches","title":"obj spec.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleshttpheadermatchessecret","title":"obj spec.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsruleskafka","title":"obj spec.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapikey","title":"fn spec.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithapiversion","title":"fn spec.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithclientid","title":"fn spec.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithrole","title":"fn spec.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsruleskafkawithtopic","title":"fn spec.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtls","title":"obj spec.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithcertificate","title":"fn spec.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithprivatekey","title":"fn spec.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlswithtrustedca","title":"fn spec.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoportsterminatingtlssecret","title":"obj spec.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithname","title":"fn spec.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoportsterminatingtlssecretwithnamespace","title":"fn spec.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequires","title":"obj spec.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressions","title":"fn spec.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchexpressionsmixin","title":"fn spec.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabels","title":"fn spec.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequireswithmatchlabelsmixin","title":"fn spec.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstorequiresmatchexpressions","title":"obj spec.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithkey","title":"fn spec.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithoperator","title":"fn spec.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvalues","title":"fn spec.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservices","title":"obj spec.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sservice","title":"obj spec.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithnamespace","title":"fn spec.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sservicewithservicename","title":"fn spec.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselector","title":"obj spec.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorwithnamespace","title":"fn spec.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselector","title":"obj spec.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdeny","title":"obj spec.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmps","title":"fn spec.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithicmpsmixin","title":"fn spec.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidr","title":"fn spec.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrmixin","title":"fn spec.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrset","title":"fn spec.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtocidrsetmixin","title":"fn spec.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpoints","title":"fn spec.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoendpointsmixin","title":"fn spec.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentities","title":"fn spec.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoentitiesmixin","title":"fn spec.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroups","title":"fn spec.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtogroupsmixin","title":"fn spec.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoports","title":"fn spec.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoportsmixin","title":"fn spec.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequires","title":"fn spec.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtorequiresmixin","title":"fn spec.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservices","title":"fn spec.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenywithtoservicesmixin","title":"fn spec.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmps","title":"obj spec.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfields","title":"fn spec.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpswithfieldsmixin","title":"fn spec.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenyicmpsfields","title":"obj spec.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithfamily","title":"fn spec.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenyicmpsfieldswithtype","title":"fn spec.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytocidrset","title":"obj spec.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidr","title":"fn spec.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithcidrgroupref","title":"fn spec.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexcept","title":"fn spec.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytocidrsetwithexceptmixin","title":"fn spec.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpoints","title":"obj spec.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressions","title":"fn spec.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchexpressionsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabels","title":"fn spec.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointswithmatchlabelsmixin","title":"fn spec.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoendpointsmatchexpressions","title":"obj spec.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithkey","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithoperator","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvalues","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroups","title":"obj spec.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytogroupsaws","title":"obj spec.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabels","title":"fn spec.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithlabelsmixin","title":"fn spec.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithregion","title":"fn spec.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsids","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnames","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn spec.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoports","title":"obj spec.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithports","title":"fn spec.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportswithportsmixin","title":"fn spec.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoportsports","title":"obj spec.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithport","title":"fn spec.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoportsportswithprotocol","title":"fn spec.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequires","title":"obj spec.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressions","title":"fn spec.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchexpressionsmixin","title":"fn spec.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabels","title":"fn spec.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequireswithmatchlabelsmixin","title":"fn spec.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytorequiresmatchexpressions","title":"obj spec.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithkey","title":"fn spec.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithoperator","title":"fn spec.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvalues","title":"fn spec.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservices","title":"obj spec.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sservice","title":"obj spec.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithnamespace","title":"fn spec.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sservicewithservicename","title":"fn spec.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn spec.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselector","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn spec.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselector","title":"obj spec.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressions","title":"fn spec.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchexpressionsmixin","title":"fn spec.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabels","title":"fn spec.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectorwithmatchlabelsmixin","title":"fn spec.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specendpointselectormatchexpressions","title":"obj spec.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithkey","title":"fn spec.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithoperator","title":"fn spec.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvalues","title":"fn spec.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specendpointselectormatchexpressionswithvaluesmixin","title":"fn spec.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingress","title":"obj spec.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidr","title":"fn spec.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrmixin","title":"fn spec.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrset","title":"fn spec.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromcidrsetmixin","title":"fn spec.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpoints","title":"fn spec.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromendpointsmixin","title":"fn spec.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentities","title":"fn spec.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromentitiesmixin","title":"fn spec.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequires","title":"fn spec.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithfromrequiresmixin","title":"fn spec.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmps","title":"fn spec.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithicmpsmixin","title":"fn spec.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoports","title":"fn spec.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresswithtoportsmixin","title":"fn spec.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressauthentication","title":"obj spec.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressauthenticationwithmode","title":"fn spec.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromcidrset","title":"obj spec.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidr","title":"fn spec.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithcidrgroupref","title":"fn spec.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexcept","title":"fn spec.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromcidrsetwithexceptmixin","title":"fn spec.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpoints","title":"obj spec.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressions","title":"fn spec.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchexpressionsmixin","title":"fn spec.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabels","title":"fn spec.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointswithmatchlabelsmixin","title":"fn spec.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromendpointsmatchexpressions","title":"obj spec.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithkey","title":"fn spec.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithoperator","title":"fn spec.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvalues","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequires","title":"obj spec.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressions","title":"fn spec.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchexpressionsmixin","title":"fn spec.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabels","title":"fn spec.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequireswithmatchlabelsmixin","title":"fn spec.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressfromrequiresmatchexpressions","title":"obj spec.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithkey","title":"fn spec.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithoperator","title":"fn spec.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvalues","title":"fn spec.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmps","title":"obj spec.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfields","title":"fn spec.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpswithfieldsmixin","title":"fn spec.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressicmpsfields","title":"obj spec.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithfamily","title":"fn spec.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressicmpsfieldswithtype","title":"fn spec.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoports","title":"obj spec.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithports","title":"fn spec.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithportsmixin","title":"fn spec.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernames","title":"fn spec.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportswithservernamesmixin","title":"fn spec.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistener","title":"obj spec.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerwithname","title":"fn spec.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportslistenerenvoyconfig","title":"obj spec.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithkind","title":"fn spec.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportslistenerenvoyconfigwithname","title":"fn spec.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtls","title":"obj spec.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithcertificate","title":"fn spec.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithprivatekey","title":"fn spec.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlswithtrustedca","title":"fn spec.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsoriginatingtlssecret","title":"obj spec.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithname","title":"fn spec.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsoriginatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsports","title":"obj spec.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithport","title":"fn spec.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsportswithprotocol","title":"fn spec.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrules","title":"obj spec.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdns","title":"fn spec.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithdnsmixin","title":"fn spec.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttp","title":"fn spec.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithhttpmixin","title":"fn spec.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafka","title":"fn spec.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithkafkamixin","title":"fn spec.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7","title":"fn spec.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7mixin","title":"fn spec.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleswithl7proto","title":"fn spec.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsrulesdns","title":"obj spec.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchname","title":"fn spec.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsrulesdnswithmatchpattern","title":"fn spec.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttp","title":"obj spec.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatches","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadermatchesmixin","title":"fn spec.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheaders","title":"fn spec.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithheadersmixin","title":"fn spec.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithhost","title":"fn spec.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithmethod","title":"fn spec.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpwithpath","title":"fn spec.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatches","title":"obj spec.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithmismatch","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatcheswithvalue","title":"fn spec.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleshttpheadermatchessecret","title":"obj spec.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithname","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn spec.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsruleskafka","title":"obj spec.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapikey","title":"fn spec.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithapiversion","title":"fn spec.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithclientid","title":"fn spec.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithrole","title":"fn spec.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsruleskafkawithtopic","title":"fn spec.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtls","title":"obj spec.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithcertificate","title":"fn spec.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithprivatekey","title":"fn spec.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlswithtrustedca","title":"fn spec.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingresstoportsterminatingtlssecret","title":"obj spec.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithname","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingresstoportsterminatingtlssecretwithnamespace","title":"fn spec.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdeny","title":"obj spec.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidr","title":"fn spec.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrmixin","title":"fn spec.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrset","title":"fn spec.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromcidrsetmixin","title":"fn spec.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpoints","title":"fn spec.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromendpointsmixin","title":"fn spec.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentities","title":"fn spec.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromentitiesmixin","title":"fn spec.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequires","title":"fn spec.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithfromrequiresmixin","title":"fn spec.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmps","title":"fn spec.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithicmpsmixin","title":"fn spec.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoports","title":"fn spec.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenywithtoportsmixin","title":"fn spec.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromcidrset","title":"obj spec.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidr","title":"fn spec.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithcidrgroupref","title":"fn spec.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexcept","title":"fn spec.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromcidrsetwithexceptmixin","title":"fn spec.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpoints","title":"obj spec.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressions","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabels","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromendpointsmatchexpressions","title":"obj spec.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithkey","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequires","title":"obj spec.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressions","title":"fn spec.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchexpressionsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabels","title":"fn spec.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequireswithmatchlabelsmixin","title":"fn spec.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyfromrequiresmatchexpressions","title":"obj spec.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithkey","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithoperator","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvalues","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn spec.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmps","title":"obj spec.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfields","title":"fn spec.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpswithfieldsmixin","title":"fn spec.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenyicmpsfields","title":"obj spec.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithfamily","title":"fn spec.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenyicmpsfieldswithtype","title":"fn spec.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoports","title":"obj spec.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithports","title":"fn spec.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportswithportsmixin","title":"fn spec.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specingressdenytoportsports","title":"obj spec.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithport","title":"fn spec.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specingressdenytoportsportswithprotocol","title":"fn spec.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-speclabels","title":"obj spec.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithkey","title":"fn spec.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithsource","title":"fn spec.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-speclabelswithvalue","title":"fn spec.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselector","title":"obj spec.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressions","title":"fn spec.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchexpressionsmixin","title":"fn spec.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabels","title":"fn spec.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectorwithmatchlabelsmixin","title":"fn spec.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specnodeselectormatchexpressions","title":"obj spec.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithkey","title":"fn spec.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithoperator","title":"fn spec.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvalues","title":"fn spec.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specnodeselectormatchexpressionswithvaluesmixin","title":"fn spec.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specs","title":"obj specs","text":"<p>\"Specs is a list of desired Cilium specific rule specification.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithdescription","title":"fn specs.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithegress","title":"fn specs.withEgress","text":"<pre><code>withEgress(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdeny","title":"fn specs.withEgressDeny","text":"<pre><code>withEgressDeny(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressdenymixin","title":"fn specs.withEgressDenyMixin","text":"<pre><code>withEgressDenyMixin(egressDeny)\n</code></pre> <p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithegressmixin","title":"fn specs.withEgressMixin","text":"<pre><code>withEgressMixin(egress)\n</code></pre> <p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithingress","title":"fn specs.withIngress","text":"<pre><code>withIngress(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdeny","title":"fn specs.withIngressDeny","text":"<pre><code>withIngressDeny(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressdenymixin","title":"fn specs.withIngressDenyMixin","text":"<pre><code>withIngressDenyMixin(ingressDeny)\n</code></pre> <p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithingressmixin","title":"fn specs.withIngressMixin","text":"<pre><code>withIngressMixin(ingress)\n</code></pre> <p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabels","title":"fn specs.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specswithlabelsmixin","title":"fn specs.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegress","title":"obj specs.egress","text":"<p>\"Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmps","title":"fn specs.egress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithicmpsmixin","title":"fn specs.egress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidr","title":"fn specs.egress.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrmixin","title":"fn specs.egress.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrset","title":"fn specs.egress.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtocidrsetmixin","title":"fn specs.egress.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpoints","title":"fn specs.egress.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoendpointsmixin","title":"fn specs.egress.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentities","title":"fn specs.egress.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoentitiesmixin","title":"fn specs.egress.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdns","title":"fn specs.egress.withToFQDNs","text":"<pre><code>withToFQDNs(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtofqdnsmixin","title":"fn specs.egress.withToFQDNsMixin","text":"<pre><code>withToFQDNsMixin(toFQDNs)\n</code></pre> <p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroups","title":"fn specs.egress.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtogroupsmixin","title":"fn specs.egress.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoports","title":"fn specs.egress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoportsmixin","title":"fn specs.egress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequires","title":"fn specs.egress.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtorequiresmixin","title":"fn specs.egress.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservices","title":"fn specs.egress.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresswithtoservicesmixin","title":"fn specs.egress.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressauthentication","title":"obj specs.egress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressauthenticationwithmode","title":"fn specs.egress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmps","title":"obj specs.egress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfields","title":"fn specs.egress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpswithfieldsmixin","title":"fn specs.egress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressicmpsfields","title":"obj specs.egress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithfamily","title":"fn specs.egress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressicmpsfieldswithtype","title":"fn specs.egress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstocidrset","title":"obj specs.egress.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidr","title":"fn specs.egress.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithcidrgroupref","title":"fn specs.egress.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexcept","title":"fn specs.egress.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstocidrsetwithexceptmixin","title":"fn specs.egress.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpoints","title":"obj specs.egress.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressions","title":"fn specs.egress.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchexpressionsmixin","title":"fn specs.egress.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabels","title":"fn specs.egress.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointswithmatchlabelsmixin","title":"fn specs.egress.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoendpointsmatchexpressions","title":"obj specs.egress.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithkey","title":"fn specs.egress.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithoperator","title":"fn specs.egress.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvalues","title":"fn specs.egress.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egress.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstofqdns","title":"obj specs.egress.toFQDNs","text":"<p>\"ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of <code>ToFQDN.MatchName</code>s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -&gt; IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchname","title":"fn specs.egress.toFQDNs.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstofqdnswithmatchpattern","title":"fn specs.egress.toFQDNs.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroups","title":"obj specs.egress.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstogroupsaws","title":"obj specs.egress.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabels","title":"fn specs.egress.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithlabelsmixin","title":"fn specs.egress.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithregion","title":"fn specs.egress.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsids","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnames","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egress.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoports","title":"obj specs.egress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithports","title":"fn specs.egress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithportsmixin","title":"fn specs.egress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernames","title":"fn specs.egress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportswithservernamesmixin","title":"fn specs.egress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistener","title":"obj specs.egress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerwithname","title":"fn specs.egress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportslistenerenvoyconfig","title":"obj specs.egress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithkind","title":"fn specs.egress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportslistenerenvoyconfigwithname","title":"fn specs.egress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtls","title":"obj specs.egress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithcertificate","title":"fn specs.egress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithprivatekey","title":"fn specs.egress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlswithtrustedca","title":"fn specs.egress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsoriginatingtlssecret","title":"obj specs.egress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithname","title":"fn specs.egress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsports","title":"obj specs.egress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithport","title":"fn specs.egress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsportswithprotocol","title":"fn specs.egress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrules","title":"obj specs.egress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdns","title":"fn specs.egress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithdnsmixin","title":"fn specs.egress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttp","title":"fn specs.egress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithhttpmixin","title":"fn specs.egress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafka","title":"fn specs.egress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithkafkamixin","title":"fn specs.egress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7","title":"fn specs.egress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7mixin","title":"fn specs.egress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleswithl7proto","title":"fn specs.egress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsrulesdns","title":"obj specs.egress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchname","title":"fn specs.egress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsrulesdnswithmatchpattern","title":"fn specs.egress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttp","title":"obj specs.egress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatches","title":"fn specs.egress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.egress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheaders","title":"fn specs.egress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithheadersmixin","title":"fn specs.egress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithhost","title":"fn specs.egress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithmethod","title":"fn specs.egress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpwithpath","title":"fn specs.egress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatches","title":"obj specs.egress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.egress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.egress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleshttpheadermatchessecret","title":"obj specs.egress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.egress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsruleskafka","title":"obj specs.egress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapikey","title":"fn specs.egress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithapiversion","title":"fn specs.egress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithclientid","title":"fn specs.egress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithrole","title":"fn specs.egress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsruleskafkawithtopic","title":"fn specs.egress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtls","title":"obj specs.egress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithcertificate","title":"fn specs.egress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithprivatekey","title":"fn specs.egress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlswithtrustedca","title":"fn specs.egress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoportsterminatingtlssecret","title":"obj specs.egress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithname","title":"fn specs.egress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoportsterminatingtlssecretwithnamespace","title":"fn specs.egress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequires","title":"obj specs.egress.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressions","title":"fn specs.egress.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchexpressionsmixin","title":"fn specs.egress.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabels","title":"fn specs.egress.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequireswithmatchlabelsmixin","title":"fn specs.egress.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstorequiresmatchexpressions","title":"obj specs.egress.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithkey","title":"fn specs.egress.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithoperator","title":"fn specs.egress.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvalues","title":"fn specs.egress.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egress.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservices","title":"obj specs.egress.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sservice","title":"obj specs.egress.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithnamespace","title":"fn specs.egress.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sservicewithservicename","title":"fn specs.egress.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselector","title":"obj specs.egress.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorwithnamespace","title":"fn specs.egress.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselector","title":"obj specs.egress.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegresstoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egress.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegresstoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egress.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdeny","title":"obj specs.egressDeny","text":"<p>\"EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmps","title":"fn specs.egressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithicmpsmixin","title":"fn specs.egressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidr","title":"fn specs.egressDeny.withToCIDR","text":"<pre><code>withToCIDR(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrmixin","title":"fn specs.egressDeny.withToCIDRMixin","text":"<pre><code>withToCIDRMixin(toCIDR)\n</code></pre> <p>\"ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrset","title":"fn specs.egressDeny.withToCIDRSet","text":"<pre><code>withToCIDRSet(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtocidrsetmixin","title":"fn specs.egressDeny.withToCIDRSetMixin","text":"<pre><code>withToCIDRSetMixin(toCIDRSet)\n</code></pre> <p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpoints","title":"fn specs.egressDeny.withToEndpoints","text":"<pre><code>withToEndpoints(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoendpointsmixin","title":"fn specs.egressDeny.withToEndpointsMixin","text":"<pre><code>withToEndpointsMixin(toEndpoints)\n</code></pre> <p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentities","title":"fn specs.egressDeny.withToEntities","text":"<pre><code>withToEntities(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoentitiesmixin","title":"fn specs.egressDeny.withToEntitiesMixin","text":"<pre><code>withToEntitiesMixin(toEntities)\n</code></pre> <p>\"ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are <code>world</code>, <code>cluster</code>,<code>host</code>,<code>remote-node</code>,<code>kube-apiserver</code>, <code>init</code>, <code>health</code>,<code>unmanaged</code> and <code>all</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroups","title":"fn specs.egressDeny.withToGroups","text":"<pre><code>withToGroups(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtogroupsmixin","title":"fn specs.egressDeny.withToGroupsMixin","text":"<pre><code>withToGroupsMixin(toGroups)\n</code></pre> <p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoports","title":"fn specs.egressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoportsmixin","title":"fn specs.egressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequires","title":"fn specs.egressDeny.withToRequires","text":"<pre><code>withToRequires(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtorequiresmixin","title":"fn specs.egressDeny.withToRequiresMixin","text":"<pre><code>withToRequiresMixin(toRequires)\n</code></pre> <p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservices","title":"fn specs.egressDeny.withToServices","text":"<pre><code>withToServices(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenywithtoservicesmixin","title":"fn specs.egressDeny.withToServicesMixin","text":"<pre><code>withToServicesMixin(toServices)\n</code></pre> <p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmps","title":"obj specs.egressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"app=httpd\\\" is not allowed to initiate type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfields","title":"fn specs.egressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpswithfieldsmixin","title":"fn specs.egressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenyicmpsfields","title":"obj specs.egressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithfamily","title":"fn specs.egressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenyicmpsfieldswithtype","title":"fn specs.egressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytocidrset","title":"obj specs.egressDeny.toCIDRSet","text":"<p>\"ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. \\n Example: Any endpoint with the label \\\"app=database-proxy\\\" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidr","title":"fn specs.egressDeny.toCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithcidrgroupref","title":"fn specs.egressDeny.toCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexcept","title":"fn specs.egressDeny.toCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytocidrsetwithexceptmixin","title":"fn specs.egressDeny.toCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpoints","title":"obj specs.egressDeny.toEndpoints","text":"<p>\"ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. \\n Example: Any endpoint with the label \\\"role=frontend\\\" can communicate with any endpoint carrying the label \\\"role=backend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressions","title":"fn specs.egressDeny.toEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchexpressionsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabels","title":"fn specs.egressDeny.toEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointswithmatchlabelsmixin","title":"fn specs.egressDeny.toEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoendpointsmatchexpressions","title":"obj specs.egressDeny.toEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithkey","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithoperator","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvalues","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoendpointsmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroups","title":"obj specs.egressDeny.toGroups","text":"<p>\"ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: \\n Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytogroupsaws","title":"obj specs.egressDeny.toGroups.aws","text":"<p>\"AWSGroup is an structure that can be used to whitelisting information from AWS integration\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabels","title":"fn specs.egressDeny.toGroups.aws.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithlabelsmixin","title":"fn specs.egressDeny.toGroups.aws.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithregion","title":"fn specs.egressDeny.toGroups.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsids","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIds","text":"<pre><code>withSecurityGroupsIds(securityGroupsIds)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsidsmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsIdsMixin","text":"<pre><code>withSecurityGroupsIdsMixin(securityGroupsIds)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnames","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNames","text":"<pre><code>withSecurityGroupsNames(securityGroupsNames)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytogroupsawswithsecuritygroupsnamesmixin","title":"fn specs.egressDeny.toGroups.aws.withSecurityGroupsNamesMixin","text":"<pre><code>withSecurityGroupsNamesMixin(securityGroupsNames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoports","title":"obj specs.egressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. \\n Example: Any endpoint with the label \\\"role=frontend\\\" is not allowed to initiate connections to destination port 8080/tcp\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithports","title":"fn specs.egressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportswithportsmixin","title":"fn specs.egressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoportsports","title":"obj specs.egressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithport","title":"fn specs.egressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoportsportswithprotocol","title":"fn specs.egressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequires","title":"obj specs.egressDeny.toRequires","text":"<p>\"ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires any endpoint to which it communicates to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressions","title":"fn specs.egressDeny.toRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchexpressionsmixin","title":"fn specs.egressDeny.toRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabels","title":"fn specs.egressDeny.toRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequireswithmatchlabelsmixin","title":"fn specs.egressDeny.toRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytorequiresmatchexpressions","title":"obj specs.egressDeny.toRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithkey","title":"fn specs.egressDeny.toRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithoperator","title":"fn specs.egressDeny.toRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvalues","title":"fn specs.egressDeny.toRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytorequiresmatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservices","title":"obj specs.egressDeny.toServices","text":"<p>\"ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. \\n Example: Any endpoint with the label \\\"app=backend-app\\\" is allowed to initiate connections to all cidrs backing the \\\"external-service\\\" service\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sservice","title":"obj specs.egressDeny.toServices.k8sService","text":"<p>\"K8sService selects service by name and namespace pair\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithnamespace","title":"fn specs.egressDeny.toServices.k8sService.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sservicewithservicename","title":"fn specs.egressDeny.toServices.k8sService.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector","text":"<p>\"K8sServiceSelector selects services by k8s labels and namespace\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorwithnamespace","title":"fn specs.egressDeny.toServices.k8sServiceSelector.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselector","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector","text":"<p>\"ServiceSelector is a label selector for k8s services\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressions","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchexpressionsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabels","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectorwithmatchlabelsmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsegressdenytoservicesk8sserviceselectorselectormatchexpressions","title":"obj specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithkey","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithoperator","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvalues","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsegressdenytoservicesk8sserviceselectorselectormatchexpressionswithvaluesmixin","title":"fn specs.egressDeny.toServices.k8sServiceSelector.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselector","title":"obj specs.endpointSelector","text":"<p>\"EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressions","title":"fn specs.endpointSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchexpressionsmixin","title":"fn specs.endpointSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabels","title":"fn specs.endpointSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectorwithmatchlabelsmixin","title":"fn specs.endpointSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsendpointselectormatchexpressions","title":"obj specs.endpointSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithkey","title":"fn specs.endpointSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithoperator","title":"fn specs.endpointSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvalues","title":"fn specs.endpointSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsendpointselectormatchexpressionswithvaluesmixin","title":"fn specs.endpointSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingress","title":"obj specs.ingress","text":"<p>\"Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidr","title":"fn specs.ingress.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrmixin","title":"fn specs.ingress.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrset","title":"fn specs.ingress.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromcidrsetmixin","title":"fn specs.ingress.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpoints","title":"fn specs.ingress.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromendpointsmixin","title":"fn specs.ingress.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentities","title":"fn specs.ingress.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromentitiesmixin","title":"fn specs.ingress.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequires","title":"fn specs.ingress.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithfromrequiresmixin","title":"fn specs.ingress.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmps","title":"fn specs.ingress.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithicmpsmixin","title":"fn specs.ingress.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoports","title":"fn specs.ingress.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresswithtoportsmixin","title":"fn specs.ingress.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressauthentication","title":"obj specs.ingress.authentication","text":"<p>\"Authentication is the required authentication type for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressauthenticationwithmode","title":"fn specs.ingress.authentication.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode is the required authentication mode for the allowed traffic, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromcidrset","title":"obj specs.ingress.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidr","title":"fn specs.ingress.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithcidrgroupref","title":"fn specs.ingress.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexcept","title":"fn specs.ingress.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromcidrsetwithexceptmixin","title":"fn specs.ingress.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpoints","title":"obj specs.ingress.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressions","title":"fn specs.ingress.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchexpressionsmixin","title":"fn specs.ingress.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabels","title":"fn specs.ingress.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointswithmatchlabelsmixin","title":"fn specs.ingress.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromendpointsmatchexpressions","title":"obj specs.ingress.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithkey","title":"fn specs.ingress.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithoperator","title":"fn specs.ingress.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvalues","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequires","title":"obj specs.ingress.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressions","title":"fn specs.ingress.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchexpressionsmixin","title":"fn specs.ingress.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabels","title":"fn specs.ingress.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequireswithmatchlabelsmixin","title":"fn specs.ingress.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressfromrequiresmatchexpressions","title":"obj specs.ingress.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithkey","title":"fn specs.ingress.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithoperator","title":"fn specs.ingress.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvalues","title":"fn specs.ingress.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingress.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmps","title":"obj specs.ingress.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfields","title":"fn specs.ingress.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpswithfieldsmixin","title":"fn specs.ingress.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressicmpsfields","title":"obj specs.ingress.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithfamily","title":"fn specs.ingress.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressicmpsfieldswithtype","title":"fn specs.ingress.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoports","title":"obj specs.ingress.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can only accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithports","title":"fn specs.ingress.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithportsmixin","title":"fn specs.ingress.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernames","title":"fn specs.ingress.toPorts.withServerNames","text":"<pre><code>withServerNames(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportswithservernamesmixin","title":"fn specs.ingress.toPorts.withServerNamesMixin","text":"<pre><code>withServerNamesMixin(serverNames)\n</code></pre> <p>\"ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistener","title":"obj specs.ingress.toPorts.listener","text":"<p>\"listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerwithname","title":"fn specs.ingress.toPorts.listener.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportslistenerenvoyconfig","title":"obj specs.ingress.toPorts.listener.envoyConfig","text":"<p>\"EnvoyConfig is a reference to the CEC or CCNP resource in which the listener is defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithkind","title":"fn specs.ingress.toPorts.listener.envoyConfig.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportslistenerenvoyconfigwithname","title":"fn specs.ingress.toPorts.listener.envoyConfig.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtls","title":"obj specs.ingress.toPorts.originatingTLS","text":"<p>\"OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithcertificate","title":"fn specs.ingress.toPorts.originatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithprivatekey","title":"fn specs.ingress.toPorts.originatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlswithtrustedca","title":"fn specs.ingress.toPorts.originatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsoriginatingtlssecret","title":"obj specs.ingress.toPorts.originatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithname","title":"fn specs.ingress.toPorts.originatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsoriginatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.originatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsports","title":"obj specs.ingress.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithport","title":"fn specs.ingress.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsportswithprotocol","title":"fn specs.ingress.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrules","title":"obj specs.ingress.toPorts.rules","text":"<p>\"Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdns","title":"fn specs.ingress.toPorts.rules.withDns","text":"<pre><code>withDns(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithdnsmixin","title":"fn specs.ingress.toPorts.rules.withDnsMixin","text":"<pre><code>withDnsMixin(dns)\n</code></pre> <p>\"DNS-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttp","title":"fn specs.ingress.toPorts.rules.withHttp","text":"<pre><code>withHttp(http)\n</code></pre> <p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithhttpmixin","title":"fn specs.ingress.toPorts.rules.withHttpMixin","text":"<pre><code>withHttpMixin(http)\n</code></pre> <p>\"HTTP specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafka","title":"fn specs.ingress.toPorts.rules.withKafka","text":"<pre><code>withKafka(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithkafkamixin","title":"fn specs.ingress.toPorts.rules.withKafkaMixin","text":"<pre><code>withKafkaMixin(kafka)\n</code></pre> <p>\"Kafka-specific rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7","title":"fn specs.ingress.toPorts.rules.withL7","text":"<pre><code>withL7(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7mixin","title":"fn specs.ingress.toPorts.rules.withL7Mixin","text":"<pre><code>withL7Mixin(l7)\n</code></pre> <p>\"Key-value pair rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleswithl7proto","title":"fn specs.ingress.toPorts.rules.withL7proto","text":"<pre><code>withL7proto(l7proto)\n</code></pre> <p>\"Name of the L7 protocol for which the Key-value pair rules apply.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsrulesdns","title":"obj specs.ingress.toPorts.rules.dns","text":"<p>\"DNS-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchname","title":"fn specs.ingress.toPorts.rules.dns.withMatchName","text":"<pre><code>withMatchName(matchName)\n</code></pre> <p>\"MatchName matches literal DNS names. A trailing \\\".\\\" is automatically added when missing.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsrulesdnswithmatchpattern","title":"fn specs.ingress.toPorts.rules.dns.withMatchPattern","text":"<pre><code>withMatchPattern(matchPattern)\n</code></pre> <p>\"MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - \\\"\\\" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a \\\"\\\" as the leftmost character, without a following \\\".\\\" matches all subdomains as well as the name to the right. A trailing \\\".\\\" is automatically added when missing. \\n Examples: <code>*.cilium.io</code> matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not <code>*cilium.io</code> matches cilium.io and all subdomains ends with \\\"cilium.io\\\" except those containing \\\".\\\" separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with \\\"sub\\\" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttp","title":"obj specs.ingress.toPorts.rules.http","text":"<p>\"HTTP specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatches","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatches","text":"<pre><code>withHeaderMatches(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadermatchesmixin","title":"fn specs.ingress.toPorts.rules.http.withHeaderMatchesMixin","text":"<pre><code>withHeaderMatchesMixin(headerMatches)\n</code></pre> <p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheaders","title":"fn specs.ingress.toPorts.rules.http.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithheadersmixin","title":"fn specs.ingress.toPorts.rules.http.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithhost","title":"fn specs.ingress.toPorts.rules.http.withHost","text":"<pre><code>withHost(host)\n</code></pre> <p>\"Host is an extended POSIX regex matched against the host header of a request, e.g. \\\"foo.com\\\" \\n If omitted or empty, the value of the host header is ignored.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithmethod","title":"fn specs.ingress.toPorts.rules.http.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is an extended POSIX regex matched against the method of a request, e.g. \\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"PATCH\\\", \\\"DELETE\\\", ... \\n If omitted or empty, all methods are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpwithpath","title":"fn specs.ingress.toPorts.rules.http.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. \\n If omitted or empty, all paths are all allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatches","title":"obj specs.ingress.toPorts.rules.http.headerMatches","text":"<p>\"HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithmismatch","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withMismatch","text":"<pre><code>withMismatch(mismatch)\n</code></pre> <p>\"Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name identifies the header.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatcheswithvalue","title":"fn specs.ingress.toPorts.rules.http.headerMatches.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value matches the exact value of the header. Can be specified either alone or together with \\\"Secret\\\"; will be used as the header value if the secret can not be found in the latter case.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleshttpheadermatchessecret","title":"obj specs.ingress.toPorts.rules.http.headerMatches.secret","text":"<p>\"Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no \\\"Value\\\" specified, the match will fail.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithname","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleshttpheadermatchessecretwithnamespace","title":"fn specs.ingress.toPorts.rules.http.headerMatches.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsruleskafka","title":"obj specs.ingress.toPorts.rules.kafka","text":"<p>\"Kafka-specific rules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapikey","title":"fn specs.ingress.toPorts.rules.kafka.withApiKey","text":"<pre><code>withApiKey(apiKey)\n</code></pre> <p>\"APIKey is a case-insensitive string matched against the key of a request, e.g. \\\"produce\\\", \\\"fetch\\\", \\\"createtopic\\\", \\\"deletetopic\\\", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys \\n If omitted or empty, and if Role is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithapiversion","title":"fn specs.ingress.toPorts.rules.kafka.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. \\n If omitted or empty, all versions are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithclientid","title":"fn specs.ingress.toPorts.rules.kafka.withClientID","text":"<pre><code>withClientID(clientID)\n</code></pre> <p>\"ClientID is the client identifier as provided in the request. \\n From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. \\n If omitted or empty, all client identifiers are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithrole","title":"fn specs.ingress.toPorts.rules.kafka.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as \\\"produce\\\" or \\\"consume\\\". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. \\n The following values are supported: - \\\"produce\\\": Allow producing to the topics specified in the rule - \\\"consume\\\": Allow consuming from the topics specified in the rule \\n This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. \\n If omitted or empty, and if APIKey is not specified, then all keys are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsruleskafkawithtopic","title":"fn specs.ingress.toPorts.rules.kafka.withTopic","text":"<pre><code>withTopic(topic)\n</code></pre> <p>\"Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. \\n This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. \\n Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. \\n If omitted or empty, all topics are allowed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtls","title":"obj specs.ingress.toPorts.terminatingTLS","text":"<p>\"TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithcertificate","title":"fn specs.ingress.toPorts.terminatingTLS.withCertificate","text":"<pre><code>withCertificate(certificate)\n</code></pre> <p>\"Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithprivatekey","title":"fn specs.ingress.toPorts.terminatingTLS.withPrivateKey","text":"<pre><code>withPrivateKey(privateKey)\n</code></pre> <p>\"PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlswithtrustedca","title":"fn specs.ingress.toPorts.terminatingTLS.withTrustedCA","text":"<pre><code>withTrustedCA(trustedCA)\n</code></pre> <p>\"TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingresstoportsterminatingtlssecret","title":"obj specs.ingress.toPorts.terminatingTLS.secret","text":"<p>\"Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithname","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the secret.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingresstoportsterminatingtlssecretwithnamespace","title":"fn specs.ingress.toPorts.terminatingTLS.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., \\\"default\\\").\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdeny","title":"obj specs.ingressDeny","text":"<p>\"IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidr","title":"fn specs.ingressDeny.withFromCIDR","text":"<pre><code>withFromCIDR(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrmixin","title":"fn specs.ingressDeny.withFromCIDRMixin","text":"<pre><code>withFromCIDRMixin(fromCIDR)\n</code></pre> <p>\"FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do not originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.3.9.1\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrset","title":"fn specs.ingressDeny.withFromCIDRSet","text":"<pre><code>withFromCIDRSet(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromcidrsetmixin","title":"fn specs.ingressDeny.withFromCIDRSetMixin","text":"<pre><code>withFromCIDRSetMixin(fromCIDRSet)\n</code></pre> <p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpoints","title":"fn specs.ingressDeny.withFromEndpoints","text":"<pre><code>withFromEndpoints(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromendpointsmixin","title":"fn specs.ingressDeny.withFromEndpointsMixin","text":"<pre><code>withFromEndpointsMixin(fromEndpoints)\n</code></pre> <p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentities","title":"fn specs.ingressDeny.withFromEntities","text":"<pre><code>withFromEntities(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromentitiesmixin","title":"fn specs.ingressDeny.withFromEntitiesMixin","text":"<pre><code>withFromEntitiesMixin(fromEntities)\n</code></pre> <p>\"FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are <code>world</code>, <code>cluster</code> and <code>host</code>\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequires","title":"fn specs.ingressDeny.withFromRequires","text":"<pre><code>withFromRequires(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithfromrequiresmixin","title":"fn specs.ingressDeny.withFromRequiresMixin","text":"<pre><code>withFromRequiresMixin(fromRequires)\n</code></pre> <p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmps","title":"fn specs.ingressDeny.withIcmps","text":"<pre><code>withIcmps(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithicmpsmixin","title":"fn specs.ingressDeny.withIcmpsMixin","text":"<pre><code>withIcmpsMixin(icmps)\n</code></pre> <p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoports","title":"fn specs.ingressDeny.withToPorts","text":"<pre><code>withToPorts(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenywithtoportsmixin","title":"fn specs.ingressDeny.withToPortsMixin","text":"<pre><code>withToPortsMixin(toPorts)\n</code></pre> <p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromcidrset","title":"obj specs.ingressDeny.fromCIDRSet","text":"<p>\"FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. \\n Example: Any endpoint with the label \\\"app=my-legacy-pet\\\" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidr","title":"fn specs.ingressDeny.fromCIDRSet.withCidr","text":"<pre><code>withCidr(cidr)\n</code></pre> <p>\"CIDR is a CIDR prefix / IP Block.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithcidrgroupref","title":"fn specs.ingressDeny.fromCIDRSet.withCidrGroupRef","text":"<pre><code>withCidrGroupRef(cidrGroupRef)\n</code></pre> <p>\"CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress) or cannot (IngressDeny) receive connections from.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexcept","title":"fn specs.ingressDeny.fromCIDRSet.withExcept","text":"<pre><code>withExcept(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromcidrsetwithexceptmixin","title":"fn specs.ingressDeny.fromCIDRSet.withExceptMixin","text":"<pre><code>withExceptMixin(except)\n</code></pre> <p>\"ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpoints","title":"obj specs.ingressDeny.fromEndpoints","text":"<p>\"FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. \\n Example: Any endpoint with the label \\\"role=backend\\\" can be consumed by any endpoint carrying the label \\\"role=frontend\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressions","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabels","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromEndpoints.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromendpointsmatchexpressions","title":"obj specs.ingressDeny.fromEndpoints.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithkey","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromendpointsmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromEndpoints.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequires","title":"obj specs.ingressDeny.fromRequires","text":"<p>\"FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. \\n Example: Any Endpoint with the label \\\"team=A\\\" requires consuming endpoint to also carry the label \\\"team=A\\\".\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressions","title":"fn specs.ingressDeny.fromRequires.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchexpressionsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabels","title":"fn specs.ingressDeny.fromRequires.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequireswithmatchlabelsmixin","title":"fn specs.ingressDeny.fromRequires.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyfromrequiresmatchexpressions","title":"obj specs.ingressDeny.fromRequires.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithkey","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithoperator","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvalues","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyfromrequiresmatchexpressionswithvaluesmixin","title":"fn specs.ingressDeny.fromRequires.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmps","title":"obj specs.ingressDeny.icmps","text":"<p>\"ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming type 8 ICMP connections.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfields","title":"fn specs.ingressDeny.icmps.withFields","text":"<pre><code>withFields(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpswithfieldsmixin","title":"fn specs.ingressDeny.icmps.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>\"Fields is a list of ICMP fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenyicmpsfields","title":"obj specs.ingressDeny.icmps.fields","text":"<p>\"Fields is a list of ICMP fields.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithfamily","title":"fn specs.ingressDeny.icmps.fields.withFamily","text":"<pre><code>withFamily(family)\n</code></pre> <p>\"Family is a IP address version. Currently, we support <code>IPv4</code> and <code>IPv6</code>. <code>IPv4</code> is set as default.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenyicmpsfieldswithtype","title":"fn specs.ingressDeny.icmps.fields.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is a ICMP-type. It should be 0-255 (8bit).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoports","title":"obj specs.ingressDeny.toPorts","text":"<p>\"ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. \\n Example: Any endpoint with the label \\\"app=httpd\\\" can not accept incoming connections on port 80/tcp.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithports","title":"fn specs.ingressDeny.toPorts.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportswithportsmixin","title":"fn specs.ingressDeny.toPorts.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>\"Ports is a list of L4 port/protocol\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsingressdenytoportsports","title":"obj specs.ingressDeny.toPorts.ports","text":"<p>\"Ports is a list of L4 port/protocol\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithport","title":"fn specs.ingressDeny.toPorts.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form \\\"1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsingressdenytoportsportswithprotocol","title":"fn specs.ingressDeny.toPorts.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: \\\"TCP\\\", \\\"UDP\\\", \\\"SCTP\\\", \\\"ANY\\\" \\n Matching on ICMP is not supported. \\n Named port specified for a container may narrow this down, but may not contradict this.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specslabels","title":"obj specs.labels","text":"<p>\"Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithkey","title":"fn specs.labels.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithsource","title":"fn specs.labels.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source can be one of the above values (e.g.: LabelSourceContainer).\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specslabelswithvalue","title":"fn specs.labels.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselector","title":"obj specs.nodeSelector","text":"<p>\"NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressions","title":"fn specs.nodeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchexpressionsmixin","title":"fn specs.nodeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabels","title":"fn specs.nodeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectorwithmatchlabelsmixin","title":"fn specs.nodeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#obj-specsnodeselectormatchexpressions","title":"obj specs.nodeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithkey","title":"fn specs.nodeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithoperator","title":"fn specs.nodeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvalues","title":"fn specs.nodeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.15/cilium/v2/ciliumNetworkPolicy/#fn-specsnodeselectormatchexpressionswithvaluesmixin","title":"fn specs.nodeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/","title":"cilium.v2.ciliumNode","text":"<p>\"CiliumNode represents a node managed by Cilium. It contains a specification to control various node specific configuration aspects and a status section to represent the status of the node.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withNodeidentity(nodeidentity)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withIp(ip)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.alibaba-cloud</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withCidr-Block(cidr_block)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> <li><code>fn withVswitch-Tags(vswitch_tags)</code></li> <li><code>fn withVswitch-TagsMixin(vswitch_tags)</code></li> <li><code>fn withVswitches(vswitches)</code></li> <li><code>fn withVswitchesMixin(vswitches)</code></li> </ul> </li> <li><code>obj spec.azure</code><ul> <li><code>fn withInterface-Name(interface_name)</code></li> </ul> </li> <li><code>obj spec.encryption</code><ul> <li><code>fn withKey(key)</code></li> </ul> </li> <li><code>obj spec.eni</code><ul> <li><code>fn withAvailability-Zone(availability_zone)</code></li> <li><code>fn withDelete-On-Termination(delete_on_termination)</code></li> <li><code>fn withDisable-Prefix-Delegation(disable_prefix_delegation)</code></li> <li><code>fn withExclude-Interface-Tags(exclude_interface_tags)</code></li> <li><code>fn withExclude-Interface-TagsMixin(exclude_interface_tags)</code></li> <li><code>fn withFirst-Interface-Index(first_interface_index)</code></li> <li><code>fn withInstance-Id(instance_id)</code></li> <li><code>fn withInstance-Type(instance_type)</code></li> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withNode-Subnet-Id(node_subnet_id)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>fn withSecurity-Group-Tags(security_group_tags)</code></li> <li><code>fn withSecurity-Group-TagsMixin(security_group_tags)</code></li> <li><code>fn withSecurity-Groups(security_groups)</code></li> <li><code>fn withSecurity-GroupsMixin(security_groups)</code></li> <li><code>fn withSubnet-Ids(subnet_ids)</code></li> <li><code>fn withSubnet-IdsMixin(subnet_ids)</code></li> <li><code>fn withSubnet-Tags(subnet_tags)</code></li> <li><code>fn withSubnet-TagsMixin(subnet_tags)</code></li> <li><code>fn withUse-Primary-Address(use_primary_address)</code></li> <li><code>fn withVpc-Id(vpc_id)</code></li> </ul> </li> <li><code>obj spec.health</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ingress</code><ul> <li><code>fn withIpv4(ipv4)</code></li> <li><code>fn withIpv6(ipv6)</code></li> </ul> </li> <li><code>obj spec.ipam</code><ul> <li><code>fn withMax-Above-Watermark(max_above_watermark)</code></li> <li><code>fn withMax-Allocate(max_allocate)</code></li> <li><code>fn withMin-Allocate(min_allocate)</code></li> <li><code>fn withPodCIDRs(podCIDRs)</code></li> <li><code>fn withPodCIDRsMixin(podCIDRs)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withPoolMixin(pool)</code></li> <li><code>fn withPre-Allocate(pre_allocate)</code></li> <li><code>obj spec.ipam.pools</code><ul> <li><code>fn withAllocated(allocated)</code></li> <li><code>fn withAllocatedMixin(allocated)</code></li> <li><code>fn withRequested(requested)</code></li> <li><code>fn withRequestedMixin(requested)</code></li> <li><code>obj spec.ipam.pools.allocated</code><ul> <li><code>fn withCidrs(cidrs)</code></li> <li><code>fn withCidrsMixin(cidrs)</code></li> <li><code>fn withPool(pool)</code></li> </ul> </li> <li><code>obj spec.ipam.pools.requested</code><ul> <li><code>fn withPool(pool)</code></li> <li><code>obj spec.ipam.pools.requested.needed</code><ul> <li><code>fn withIpv4-Addrs(ipv4_addrs)</code></li> <li><code>fn withIpv6-Addrs(ipv6_addrs)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.15/cilium/v2/ciliumNode/#fields","title":"Fields","text":""},{"location":"1.15/cilium/v2/ciliumNode/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CiliumNode</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired specification/configuration of the node.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses is the list of all node addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specwithinstance-id","title":"fn spec.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the identifier of the node. This is different from the node name which is typically the FQDN of the node. The InstanceID typically refers to the identifier used by the cloud provider or some other means of identification.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specwithnodeidentity","title":"fn spec.withNodeidentity","text":"<pre><code>withNodeidentity(nodeidentity)\n</code></pre> <p>\"NodeIdentity is the Cilium numeric identity allocated for the node, if any.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses is the list of all node addresses.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specaddresseswithip","title":"fn spec.addresses.withIp","text":"<pre><code>withIp(ip)\n</code></pre> <p>\"IP is an IP of a node\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type is the type of the node address\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specalibaba-cloud","title":"obj spec.alibaba-cloud","text":"<p>\"AlibabaCloud is the AlibabaCloud IPAM specific configuration.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithavailability-zone","title":"fn spec.alibaba-cloud.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithcidr-block","title":"fn spec.alibaba-cloud.withCidr-Block","text":"<pre><code>withCidr-Block(cidr_block)\n</code></pre> <p>\"CIDRBlock is vpc ipv4 CIDR\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithinstance-type","title":"fn spec.alibaba-cloud.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the ECS instance type, e.g. \\\"ecs.g6.2xlarge\\</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tags","title":"fn spec.alibaba-cloud.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-group-tagsmixin","title":"fn spec.alibaba-cloud.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaluating which security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groups","title":"fn spec.alibaba-cloud.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithsecurity-groupsmixin","title":"fn spec.alibaba-cloud.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvpc-id","title":"fn spec.alibaba-cloud.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VPCID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tags","title":"fn spec.alibaba-cloud.withVswitch-Tags","text":"<pre><code>withVswitch-Tags(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitch-tagsmixin","title":"fn spec.alibaba-cloud.withVswitch-TagsMixin","text":"<pre><code>withVswitch-TagsMixin(vswitch_tags)\n</code></pre> <p>\"VSwitchTags is the list of tags to use when evaluating which vSwitch to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitches","title":"fn spec.alibaba-cloud.withVswitches","text":"<pre><code>withVswitches(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specalibaba-cloudwithvswitchesmixin","title":"fn spec.alibaba-cloud.withVswitchesMixin","text":"<pre><code>withVswitchesMixin(vswitches)\n</code></pre> <p>\"VSwitches is the ID of vSwitch available for ENI\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specazure","title":"obj spec.azure","text":"<p>\"Azure is the Azure IPAM specific configuration.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specazurewithinterface-name","title":"fn spec.azure.withInterface-Name","text":"<pre><code>withInterface-Name(interface_name)\n</code></pre> <p>\"InterfaceName is the name of the interface the cilium-operator will use to allocate all the IPs on\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specencryption","title":"obj spec.encryption","text":"<p>\"Encryption is the encryption configuration of the node.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specencryptionwithkey","title":"fn spec.encryption.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the index to the key to use for encryption or 0 if encryption is disabled.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-speceni","title":"obj spec.eni","text":"<p>\"ENI is the AWS ENI specific configuration.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithavailability-zone","title":"fn spec.eni.withAvailability-Zone","text":"<pre><code>withAvailability-Zone(availability_zone)\n</code></pre> <p>\"AvailabilityZone is the availability zone to use when allocating ENIs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithdelete-on-termination","title":"fn spec.eni.withDelete-On-Termination","text":"<pre><code>withDelete-On-Termination(delete_on_termination)\n</code></pre> <p>\"DeleteOnTermination defines that the ENI should be deleted when the associated instance is terminated. If the parameter is not set the default behavior is to delete the ENI on instance termination.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithdisable-prefix-delegation","title":"fn spec.eni.withDisable-Prefix-Delegation","text":"<pre><code>withDisable-Prefix-Delegation(disable_prefix_delegation)\n</code></pre> <p>\"DisablePrefixDelegation determines whether ENI prefix delegation should be disabled on this node.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tags","title":"fn spec.eni.withExclude-Interface-Tags","text":"<pre><code>withExclude-Interface-Tags(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithexclude-interface-tagsmixin","title":"fn spec.eni.withExclude-Interface-TagsMixin","text":"<pre><code>withExclude-Interface-TagsMixin(exclude_interface_tags)\n</code></pre> <p>\"ExcludeInterfaceTags is the list of tags to use when excluding ENIs for Cilium IP allocation. Any interface matching this set of tags will not be managed by Cilium.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithfirst-interface-index","title":"fn spec.eni.withFirst-Interface-Index","text":"<pre><code>withFirst-Interface-Index(first_interface_index)\n</code></pre> <p>\"FirstInterfaceIndex is the index of the first ENI to use for IP allocation, e.g. if the node has eth0, eth1, eth2 and FirstInterfaceIndex is set to 1, then only eth1 and eth2 will be used for IP allocation, eth0 will be ignored for PodIP allocation.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithinstance-id","title":"fn spec.eni.withInstance-Id","text":"<pre><code>withInstance-Id(instance_id)\n</code></pre> <p>\"InstanceID is the AWS InstanceId of the node. The InstanceID is used to retrieve AWS metadata for the node. \\n OBSOLETE: This field is obsolete, please use Spec.InstanceID\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithinstance-type","title":"fn spec.eni.withInstance-Type","text":"<pre><code>withInstance-Type(instance_type)\n</code></pre> <p>\"InstanceType is the AWS EC2 instance type, e.g. \\\"m5.large\\</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithmax-above-watermark","title":"fn spec.eni.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MaxAboveWatermark\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithmin-allocate","title":"fn spec.eni.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.MinAllocate\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithnode-subnet-id","title":"fn spec.eni.withNode-Subnet-Id","text":"<pre><code>withNode-Subnet-Id(node_subnet_id)\n</code></pre> <p>\"NodeSubnetID is the subnet of the primary ENI the instance was brought up with. It is used as a sensible default subnet to create ENIs in.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithpre-allocate","title":"fn spec.eni.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved. \\n OBSOLETE: This field is obsolete, please use Spec.IPAM.PreAllocate\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tags","title":"fn spec.eni.withSecurity-Group-Tags","text":"<pre><code>withSecurity-Group-Tags(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsecurity-group-tagsmixin","title":"fn spec.eni.withSecurity-Group-TagsMixin","text":"<pre><code>withSecurity-Group-TagsMixin(security_group_tags)\n</code></pre> <p>\"SecurityGroupTags is the list of tags to use when evaliating what AWS security groups to use for the ENI.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groups","title":"fn spec.eni.withSecurity-Groups","text":"<pre><code>withSecurity-Groups(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsecurity-groupsmixin","title":"fn spec.eni.withSecurity-GroupsMixin","text":"<pre><code>withSecurity-GroupsMixin(security_groups)\n</code></pre> <p>\"SecurityGroups is the list of security groups to attach to any ENI that is created and attached to the instance.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsubnet-ids","title":"fn spec.eni.withSubnet-Ids","text":"<pre><code>withSubnet-Ids(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsubnet-idsmixin","title":"fn spec.eni.withSubnet-IdsMixin","text":"<pre><code>withSubnet-IdsMixin(subnet_ids)\n</code></pre> <p>\"SubnetIDs is the list of subnet ids to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tags","title":"fn spec.eni.withSubnet-Tags","text":"<pre><code>withSubnet-Tags(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithsubnet-tagsmixin","title":"fn spec.eni.withSubnet-TagsMixin","text":"<pre><code>withSubnet-TagsMixin(subnet_tags)\n</code></pre> <p>\"SubnetTags is the list of tags to use when evaluating what AWS subnets to use for ENI and IP allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithuse-primary-address","title":"fn spec.eni.withUse-Primary-Address","text":"<pre><code>withUse-Primary-Address(use_primary_address)\n</code></pre> <p>\"UsePrimaryAddress determines whether an ENI's primary address should be available for allocations on the node\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-speceniwithvpc-id","title":"fn spec.eni.withVpc-Id","text":"<pre><code>withVpc-Id(vpc_id)\n</code></pre> <p>\"VpcID is the VPC ID to use when allocating ENIs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-spechealth","title":"obj spec.health","text":"<p>\"HealthAddressing is the addressing information for health connectivity checking.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-spechealthwithipv4","title":"fn spec.health.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre> <p>\"IPv4 is the IPv4 address of the IPv4 health endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-spechealthwithipv6","title":"fn spec.health.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre> <p>\"IPv6 is the IPv6 address of the IPv4 health endpoint.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specingress","title":"obj spec.ingress","text":"<p>\"IngressAddressing is the addressing information for Ingress listener.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specingresswithipv4","title":"fn spec.ingress.withIpv4","text":"<pre><code>withIpv4(ipv4)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specingresswithipv6","title":"fn spec.ingress.withIpv6","text":"<pre><code>withIpv6(ipv6)\n</code></pre>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specipam","title":"obj spec.ipam","text":"<p>\"IPAM is the address management specification. This section can be populated by a user or it can be automatically populated by an IPAM operator.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithmax-above-watermark","title":"fn spec.ipam.withMax-Above-Watermark","text":"<pre><code>withMax-Above-Watermark(max_above_watermark)\n</code></pre> <p>\"MaxAboveWatermark is the maximum number of addresses to allocate beyond the addresses needed to reach the PreAllocate watermark. Going above the watermark can help reduce the number of API calls to allocate IPs, e.g. when a new ENI is allocated, as many secondary IPs as possible are allocated. Limiting the amount can help reduce waste of IPs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithmax-allocate","title":"fn spec.ipam.withMax-Allocate","text":"<pre><code>withMax-Allocate(max_allocate)\n</code></pre> <p>\"MaxAllocate is the maximum number of IPs that can be allocated to the node. When the current amount of allocated IPs will approach this value, the considered value for PreAllocate will decrease down to 0 in order to not attempt to allocate more addresses than defined.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithmin-allocate","title":"fn spec.ipam.withMin-Allocate","text":"<pre><code>withMin-Allocate(min_allocate)\n</code></pre> <p>\"MinAllocate is the minimum number of IPs that must be allocated when the node is first bootstrapped. It defines the minimum base socket of addresses that must be available. After reaching this watermark, the PreAllocate and MaxAboveWatermark logic takes over to continue allocating IPs.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithpodcidrs","title":"fn spec.ipam.withPodCIDRs","text":"<pre><code>withPodCIDRs(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithpodcidrsmixin","title":"fn spec.ipam.withPodCIDRsMixin","text":"<pre><code>withPodCIDRsMixin(podCIDRs)\n</code></pre> <p>\"PodCIDRs is the list of CIDRs available to the node for allocation. When an IP is used, the IP will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithpool","title":"fn spec.ipam.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithpoolmixin","title":"fn spec.ipam.withPoolMixin","text":"<pre><code>withPoolMixin(pool)\n</code></pre> <p>\"Pool is the list of IPs available to the node for allocation. When an IP is used, the IP will remain on this list but will be added to Status.IPAM.Used\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipamwithpre-allocate","title":"fn spec.ipam.withPre-Allocate","text":"<pre><code>withPre-Allocate(pre_allocate)\n</code></pre> <p>\"PreAllocate defines the number of IP addresses that must be available for allocation in the IPAMspec. It defines the buffer of addresses available immediately without requiring cilium-operator to get involved.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specipampools","title":"obj spec.ipam.pools","text":"<p>\"Pools contains the list of assigned IPAM pools for this node.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolswithallocated","title":"fn spec.ipam.pools.withAllocated","text":"<pre><code>withAllocated(allocated)\n</code></pre> <p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolswithallocatedmixin","title":"fn spec.ipam.pools.withAllocatedMixin","text":"<pre><code>withAllocatedMixin(allocated)\n</code></pre> <p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolswithrequested","title":"fn spec.ipam.pools.withRequested","text":"<pre><code>withRequested(requested)\n</code></pre> <p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolswithrequestedmixin","title":"fn spec.ipam.pools.withRequestedMixin","text":"<pre><code>withRequestedMixin(requested)\n</code></pre> <p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specipampoolsallocated","title":"obj spec.ipam.pools.allocated","text":"<p>\"Allocated contains the list of pooled CIDR assigned to this node. The operator will add new pod CIDRs to this field, whereas the agent will remove CIDRs it has released.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithcidrs","title":"fn spec.ipam.pools.allocated.withCidrs","text":"<pre><code>withCidrs(cidrs)\n</code></pre> <p>\"CIDRs contains a list of pod CIDRs currently allocated from this pool\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithcidrsmixin","title":"fn spec.ipam.pools.allocated.withCidrsMixin","text":"<pre><code>withCidrsMixin(cidrs)\n</code></pre> <p>\"CIDRs contains a list of pod CIDRs currently allocated from this pool\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsallocatedwithpool","title":"fn spec.ipam.pools.allocated.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the name of the IPAM pool backing this allocation\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specipampoolsrequested","title":"obj spec.ipam.pools.requested","text":"<p>\"Requested contains a list of IPAM pool requests, i.e. indicates how many addresses this node requests out of each pool listed here. This field is owned and written to by cilium-agent and read by the operator.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsrequestedwithpool","title":"fn spec.ipam.pools.requested.withPool","text":"<pre><code>withPool(pool)\n</code></pre> <p>\"Pool is the name of the IPAM pool backing this request\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#obj-specipampoolsrequestedneeded","title":"obj spec.ipam.pools.requested.needed","text":"<p>\"Needed indicates how many IPs out of the above Pool this node requests from the operator. The operator runs a reconciliation loop to ensure each node always has enough PodCIDRs allocated in each pool to fulfill the requested number of IPs here.\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsrequestedneededwithipv4-addrs","title":"fn spec.ipam.pools.requested.needed.withIpv4-Addrs","text":"<pre><code>withIpv4-Addrs(ipv4_addrs)\n</code></pre> <p>\"IPv4Addrs contains the number of requested IPv4 addresses out of a given pool\"</p>"},{"location":"1.15/cilium/v2/ciliumNode/#fn-specipampoolsrequestedneededwithipv6-addrs","title":"fn spec.ipam.pools.requested.needed.withIpv6-Addrs","text":"<pre><code>withIpv6-Addrs(ipv6_addrs)\n</code></pre> <p>\"IPv6Addrs contains the number of requested IPv6 addresses out of a given pool\"</p>"}]}